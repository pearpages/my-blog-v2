[{"title":"About Javascript","type":0,"sectionRef":"#","url":"about javascript","content":"","keywords":""},{"title":"Engine","type":1,"pageTitle":"About Javascript","url":"about javascript#engine","content":"Most web browsers have a dedicated JavaScript engine to execute the code on the user's device. V8 from Google is the most used JavaScript engine. Google Chrome and the many other Chromium-based browsers use it, as do applications built with CEF, Electron, or any other framework that embeds Chromium. Other uses include the Node.js and Deno runtime systems.SpiderMonkey is developed by Mozilla for use in Firefox and its forks. The GNOME Shell uses it for extension support.JavaScriptCore is Apple's engine for its Safari browser. Other WebKit-based browsers also use it. KJS from KDE was the starting point for its development.Chakra is the engine of the Internet Explorer browser. It was also forked by Microsoft for the original Edge browser, but Edge was later rebuilt as a Chromium-based browser and thus now uses V8. Read more "},{"title":"APIs","type":1,"pageTitle":"About Javascript","url":"about javascript#apis","content":"It has application programming interfaces (APIs) for working with: textdatesregular expressionsstandard data structuresDocument Object Model (DOM) The ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O. "},{"title":"JS Multi-paradigm","type":1,"pageTitle":"About Javascript","url":"about javascript#js-multi-paradigm","content":"As a multi-paradigm language, JavaScript supports: event-drivenfunctionalimperative programming styles. "},{"title":"curly-bracket syntax","type":1,"pageTitle":"About Javascript","url":"about javascript#curly-bracket-syntax","content":"Curly-bracket or curly-brace programming languages have a syntax that defines statement blocks using the curly bracket or brace characters { and }. "},{"title":"Prototype-based programming","type":1,"pageTitle":"About Javascript","url":"about javascript#prototype-based-programming","content":"Prototype-based programming is a style of object-oriented programming in which behaviour reuse (known as inheritance) is performed via a process of reusing existing objects that serve as prototypes. This model can also be known as prototypal, prototype-oriented, classless, or instance-based programming. "},{"title":"JIT","type":1,"pageTitle":"About Javascript","url":"about javascript#jit","content":"In computing, just-in-time (JIT) compilation (also dynamic translation or run-time compilations) is a way of executing computer code that involves compilation during execution of a program (at run time) rather than before execution. "},{"title":"dynamic typing","type":1,"pageTitle":"About Javascript","url":"about javascript#dynamic-typing","content":"Dynamic type checking is the process of verifying the type safety of a program at runtime. Programming languages that include dynamic type checking but not static type checking are often called \"dynamically-typed programming languages\". See Type system. "},{"title":"Object-oriented programming","type":1,"pageTitle":"About Javascript","url":"about javascript#object-oriented-programming","content":"Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods). A feature of objects is that an object's own procedures can access and often modify the data fields of itself (objects have a notion of this or self. In OOP, computer programs are designed by making them out of objects that interact with one another. OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types. "},{"title":"First-class function","type":1,"pageTitle":"About Javascript","url":"about javascript#first-class-function","content":"This means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures "},{"title":"References/Resources","type":1,"pageTitle":"About Javascript","url":"about javascript#referencesresources","content":"Javascript Wikipedia "},{"title":"3 Typescript tricks","type":0,"sectionRef":"#","url":"3 typescript tricks","content":"","keywords":""},{"title":"Readonly","type":1,"pageTitle":"3 Typescript tricks","url":"3 typescript tricks#readonly","content":"function sortNumbers(array: Readonly<Array<number>>) { return [...array].sort((a, b) => a - b); } Copy "},{"title":"Any vs Unknown","type":1,"pageTitle":"3 Typescript tricks","url":"3 typescript tricks#any-vs-unknown","content":"any is basically saying the TypeScript compiler to not check that bit of code. Avoid using any whenever you can! It's better to use unknown instead because it enforces you to check the type of the value before using it or else it won't compile! // ... other code type Human = { name: string; age: number } someArray.forEach((entry) => { // if it's an object, we know it's a Human if (typeof entry === 'object') { console.log((entry as Human).age) } }) Copy "},{"title":"Records","type":1,"pageTitle":"3 Typescript tricks","url":"3 typescript tricks#records","content":"type AllowedKeys = 'name' | 'age' // use a type here instead of interface type Person = Record<AllowedKeys, unknown> const Human: Person = { name: 'Steve', age: 42, } Copy "},{"title":"Resources","type":1,"pageTitle":"3 Typescript tricks","url":"3 typescript tricks#resources","content":"Original Post "},{"title":"Absolute paths in js projects","type":0,"sectionRef":"#","url":"absolute-paths-in-js-projects","content":"","keywords":""},{"title":"Resources","type":1,"pageTitle":"Absolute paths in js projects","url":"absolute-paths-in-js-projects#resources","content":"Solve Module Import Aliasing for Webpack, Jest, and VSCodeUsing webpack aliasesMake VS code read webpack.config and recognize path with alias?resolve.alias "},{"title":"How to (know where to find the files)","type":1,"pageTitle":"Absolute paths in js projects","url":"absolute-paths-in-js-projects#how-to-know-where-to-find-the-files","content":"In the three scenarios we are replicating the logic concerning where to find the files. We need the bundler (webpack) to know where to find the filesWe need our testing framework (jest) to know where to find the filesWe need our IDE (visual studio code) to know where to find the files "},{"title":"1. Webpack","type":1,"pageTitle":"Absolute paths in js projects","url":"absolute-paths-in-js-projects#1-webpack","content":"We need to tell webpack how to resolve our absolute paths. const path = require('path'); module.exports = { //... resolve: { alias: { Utilities: path.resolve(__dirname, 'src/utilities/'), Templates: path.resolve(__dirname, 'src/templates/') } } }; Copy another example // webpack.config.base.js const path = require('path') module.exports = { // ... resolve: { alias: { 'react-dom': '@hot-loader/react-dom', 'Cms': path.resolve(__dirname, '..', 'src'), 'Test': path.resolve(__dirname, '..', 'test') } } } Copy "},{"title":"2. Jest","type":1,"pageTitle":"Absolute paths in js projects","url":"absolute-paths-in-js-projects#2-jest","content":"In the package.json file we can add a section for the jest module resolver. { \"name\": \"acme\", \"version\": \"1.0.0\", \"description\": \"Acme App\", \"jest\": { \"testMatch\": [ \"**/?(*.)+(test).js\", \"**/?(*.)+(it).js\" ], \"testURL\": \"https://test.com/\", \"collectCoverage\": true, \"coverageDirectory\": \"../build/coverage\", \"coverageReporters\": [ \"html\", \"lcov\" ], \"collectCoverageFrom\": [ \"src/**/*.js\", \"**/*.test.js\" ], \"transform\": { \"^.+\\\\.js$\": \"babel-jest\" }, \"setupFiles\": [ \"raf/polyfill\", \"<rootDir>/test/unit/config/imageOnLoadFix.js\", \"<rootDir>/test/unit/config/windowScrollToFix.js\", \"<rootDir>/test/unit/config/messagesConfig.js\", \"<rootDir>/test/unit/config/setupTests.js\", \"<rootDir>/test/unit/config/propTypesValidatator.js\" ], \"snapshotSerializers\": [ \"<rootDir>/node_modules/enzyme-to-json/serializer\" ], \"moduleNameMapper\": { \"\\\\.svg$\": \"<rootDir>/test/unit/__mocks__/fileMock.js\", \"\\\\.(css|less|scss|sss|styl)$\": \"<rootDir>/node_modules/jest-css-modules\", \"^Cms(.*)$\": \"<rootDir>/src$1\", \"^Test(.*)$\": \"<rootDir>/test$1\" } }, Copy "},{"title":"3. Visual Studio Code","type":1,"pageTitle":"Absolute paths in js projects","url":"absolute-paths-in-js-projects#3-visual-studio-code","content":"We need to create a jsconfig.json that visual studio code will use for its intellisense. { \"compilerOptions\": { \"baseUrl\": \"./\", \"paths\": { \"Cms/*\" :[\"src/*\"], \"Test/*\": [\"test/*\"] } }, \"exclude\": [\"node_modules\", \"build\"] } Copy "},{"title":"Age Maths problem","type":0,"sectionRef":"#","url":"age-maths-problem","content":"","keywords":""},{"title":"Solution","type":1,"pageTitle":"Age Maths problem","url":"age-maths-problem#solution","content":"x = 33 y = 22 z = 11 Copy "},{"title":"Async functions and useEffect","type":0,"sectionRef":"#","url":"async-functions-with-use-effect","content":"","keywords":""},{"title":"Bear in mind","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#bear-in-mind","content":"When we declare any function as async, it returns a promise async () => 3 // the same as () => Promise.resolve(3) Copy "},{"title":"The issue in React","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#the-issue-in-react","content":"An effect function must not return anything besides a function, which is used for clean-up. "},{"title":"What will not work","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#what-will-not-work","content":"useEffect(async () => { // ... }, []) Copy "},{"title":"Simple solutions","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#simple-solutions","content":"Create a separate async function outside useEffect and call it from the useEffect.Create a separate async function inside useEffect and call it from useEffect.Use an IIFE(Immediately Invoked Function Expression). "},{"title":"1. Create a separate async function outside useEffect and call it from the useEffect:","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#1-create-a-separate-async-function-outside-useeffect-and-call-it-from-the-useeffect","content":"async function getUsers() { const users = await axios.get('https://randomuser.me/api/?page=1&results=10&nat=us'); setUsers(users.data.results); } useEffect(() => { getUsers(); }, []); Copy "},{"title":"2. Create a separate async function inside useEffect and call it from useEffect:","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#2-create-a-separate-async-function-inside-useeffect-and-call-it-from-useeffect","content":"useEffect(() => { async function getUsers() { const users = await axios.get(\"https://randomuser.me/api/?page=1&results=10&nat=us\"); setUsers(users.data.results); } getUsers(); }, []); Copy "},{"title":"3. Use an IIFE(Immediately Invoked Function Expression):","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#3-use-an-iifeimmediately-invoked-function-expression","content":"useEffect(() => { (async () => { const users = await axios.get(\"https://randomuser.me/api/?page=1&results=10&nat=us\"); setUsers(users.data.results); })(); }, []); Copy "},{"title":"Resources","type":1,"pageTitle":"Async functions and useEffect","url":"async-functions-with-use-effect#resources","content":"Handle API calls using async await with the useEffect hookHow to use async function in React hooks useEffect (Typescript/JS)? "},{"title":"Centralized PropTypes","type":0,"sectionRef":"#","url":"centralized-prop-types","content":"PropTypes provide type warnings at runtime const { shape, number, string, oneOf } = PropTypes; UserDetails.propTypes = { user: shape({ id: number.isRequired, firstName: string.isRequired, lastName: string.isRequired, role: oneOf(['user','admin']) }; Copy /types/index.js Copy // types/index.js import { shape, number, string, oneOf } from 'prop-types'; export const userType = shape({ id: number, firstName: string.isRequired, lastName: string.isRequired, company: string, role: oneOf(['user', 'author']), address: shape({ id: number.isRequired, street: string.isRequired, street2: string, city: string.isRequired, state: string.isRequired, postal: number.isRequired }); }); Copy Centralize PropTypes","keywords":""},{"title":"Change mac folder icons","type":0,"sectionRef":"#","url":"change-mac-folder-icons","content":"Basically, copy the contents of an image and paste it in the icon of the folder description (get info) https://support.apple.com/es-es/guide/mac-help/mchlp2313/mac","keywords":""},{"title":"Conditional validation with Yup and Formik","type":0,"sectionRef":"#","url":"conditional-validation-with-yup-and-formik","content":"https://stackoverflow.com/questions/54919228/conditional-validation-with-yup-and-formik The trick for doing conditional validation is to be part of a bigger validation schema. const validationSchema = Yup.object() .shape({ isCompany: Yup.boolean() companyName: Yup.string() }) Copy We want to conditionally validate companyName using isCompany value. const validationSchema = Yup.object() .shape({ isCompany: Yup.boolean() companyName: Yup.string() .when('isCompany', { is: true, // it can also be a 'function', e.g. function (isCompany) { return assertion } then: Yup.string().required('Field is required'), otherwise: Yup.string() }) }) Copy","keywords":""},{"title":"CSS Books","type":0,"sectionRef":"#","url":"css-books","content":"","keywords":""},{"title":"SVG Animations: From Common UX Implementations to Complex Responsive Animation by Sarah Drasner (2017)","type":1,"pageTitle":"CSS Books","url":"css-books#svg-animations-from-common-ux-implementations-to-complex-responsive-animation-by-sarah-drasner-2017","content":" Learn how to make SVG cross-browser compatible, backwards compatible, optimized, and responsivePlan and debug animationMake a complex animation responsive, as many sites are responsiveProfile each animation technique in terms of performance so that you know what you're getting in to with each library or native technology "},{"title":"Creating Web Animations: Bringing Your UIs to Life by Kirupa Chinnathambi (2017)","type":1,"pageTitle":"CSS Books","url":"css-books#creating-web-animations-bringing-your-uis-to-life-by-kirupa-chinnathambi-2017","content":" Thanks to faster browsers, better web standards support, and more powerful devices, the web now defines the next generation of user interfaces that are fun, practical, fluid, and memorable. The key? Animation. But learning how to create animations is hard, and existing learning material doesn't explain the context of the UI problem that animations are trying to solve. That's where this book comes in. You'll gain a solid technical understanding of how to create awesome animations using CSS and learn how to implement common UI patterns, using practical examples that rely on animations to solve a core problem. Frontend web developers and designers only will learn important technical details, but also how to apply them to solve real-world problems. "},{"title":"Modern CSS by Joe Attardi (2020)","type":1,"pageTitle":"CSS Books","url":"css-books#modern-css-by-joe-attardi-2020","content":" Who This book is for Anyone who has some experience with HTML, and some CSS, but might not be familiar with some of the newer concepts like flexbox or grid. Also, those looking for a refresher in those areas. "},{"title":"Transitions and Animations in CSS by Estelle Weyl (2016)","type":1,"pageTitle":"CSS Books","url":"css-books#transitions-and-animations-in-css-by-estelle-weyl-2016","content":" This practical book shows you how CSS transitions and animations provide a way to control how a property changes from one value to the next over time. You can make the property value change gradually, creating pleasant and hopefully unobtrusive effects. CSS transitions let you decide which properties to animate, how long to wait before the animation starts, how long the transition should take, and how the transition will proceed—all of which are customizable. "},{"title":"Architecting CSS by Martine Dowden and Michael Dowden (2020)","type":1,"pageTitle":"CSS Books","url":"css-books#architecting-css-by-martine-dowden-and-michael-dowden-2020","content":" Who This Book Is For Primarily for front-end web developers and UI designers and anyone who works with CSS, particularly if they find it cumbersome and inelegant. It’s also suitable for software architects and tech leads who are responsible for the maintainability of their code base. "},{"title":"Responsive Web Design with HTML5 and CSS: Develop future-proof responsive websites using the latest HTML5 and CSS techniques, 3rd Edition by Ben Frain (2020)","type":1,"pageTitle":"CSS Books","url":"css-books#responsive-web-design-with-html5-and-css-develop-future-proof-responsive-websites-using-the-latest-html5-and-css-techniques-3rd-edition-by-ben-frain-2020","content":" Integrate CSS media queries into your designs; apply different styles to different devicesLoad different sets of images depending upon screen size or resolutionLeverage the speed, semantics, and clean markup of accessible HTML patternsImplement SVGs into your designs to provide resolution-independent imagesApply the latest features of CSS like custom properties, variable fonts, and CSS GridAdd validation and interface elements like date and color pickers to HTML formsUnderstand the multitude of ways to enhance interface elements with filters, shadows, animations, and more "},{"title":"CSS: The Definitive Guide by Eric Meyer (2017)","type":1,"pageTitle":"CSS Books","url":"css-books#css-the-definitive-guide-by-eric-meyer-2017","content":" This guide covers: Selectors, specificity, and the cascadeValues, units, fonts, and text propertiesPadding, borders, outlines, and marginsColors, backgrounds, and gradientsFloats and positioning tricksFlexible box layoutThe new Grid layout system2D and 3D transforms, transitions, and animationFilters, blending, clipping, and maskingMedia and feature queries "},{"title":"CSS Secrets: Better Solutions to Everyday Web Design Problems by Lea Verou (2015)","type":1,"pageTitle":"CSS Books","url":"css-books#css-secrets-better-solutions-to-everyday-web-design-problems-by-lea-verou-2015","content":" In this practical guide, CSS expert Lea Verou provides 47 undocumented techniques and tips to help intermediate-to advanced CSS developers devise elegant solutions to a wide range of everyday web design problems. "},{"title":"CSS Visual Dictionary by Greg Sidelnikov (2018)","type":1,"pageTitle":"CSS Books","url":"css-books#css-visual-dictionary-by-greg-sidelnikov-2018","content":" CSS Visual Dictionary — will get you over 250 visual diagrams explaining all CSS properties and values currently supported by all major browsers in common use. Every single *important CSS property has been documented and visualized with large, clear and easy to understand diagrams. This volume covers CSS box model, working with text, element position modes, 3D transforms, CSS grid, flex and many others. "},{"title":"CSS: The Missing Manual 4t Edition by David Sawyer McFarland (2015)","type":1,"pageTitle":"CSS Books","url":"css-books#css-the-missing-manual-4t-edition-by-david-sawyer-mcfarland-2015","content":" CSS lets you create professional-looking websites, but learning its finer points can be tricky — even for seasoned web developers. This fully updated edition provides the most modern and effective tips, tricks, and tutorial-based instruction on CSS available today. Learn how to use new tools such as Flexbox and Sass to build web pages that look great and run fast on any desktop or mobile device. Ideal for casual and experienced designers alike. "},{"title":"The Book of CSS3: A Developer’s Guide to the Future of Web Design by Peter Gasston (2014)","type":1,"pageTitle":"CSS Books","url":"css-books#the-book-of-css3-a-developers-guide-to-the-future-of-web-design-by-peter-gasston-2014","content":" Style text with custom font choices, drop shadows, and other effects;Create, position, and resize background images on the fly;Spice up static web pages with event-driven transitions and animations;Apply 2D and 3D transformations to text and images;Use linear and radial gradients to create smooth color transitions;Take control of layout with grids, columns, and flexible alignment;Tailor a website’s appearance to every type of web-capable device. "},{"title":"CSS Pocket Reference by Eric A. Meyer (2018)","type":1,"pageTitle":"CSS Books","url":"css-books#css-pocket-reference-by-eric-a-meyer-2018","content":" When you’re working with CSS and need a quick answer, CSS Pocket Reference delivers. "},{"title":"CSS Mastery by Andy Budd and Emil Björklund (2016)","type":1,"pageTitle":"CSS Books","url":"css-books#css-mastery-by-andy-budd-and-emil-björklund-2016","content":" Discover the best practice concepts in CSS design;Master the most important (and tricky) parts of CSS;Identify and fix the most common CSS problems;Deal with the most common bugs;See the latest information on CSS features and support. "},{"title":"Resources","type":1,"pageTitle":"CSS Books","url":"css-books#resources","content":"Best CSS Books "},{"title":"Functional Programming Useful Definitions","type":0,"sectionRef":"#","url":"definitions","content":"Closures A closure is the bundling of a function with its lexical environment. Closures are created at runtime during function creation time. Closures are how partial applications get their fixed arguments. Compose const compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x) Copy Currying A curried function is a function that takes multiple parameters one at a time, by taking the first argument, and returning a series of functions which each take the next argument until all the parameters have been fixed, and the function application can complete, at which point, the resulting value si returned. Data Last Style where you take the specializing parameters first, and take the data the function will act last. Destructuring const [t, u] = ['hello', 'world'] t // 'hello' u // 'world' Copy const { blop: blep } = { blop: 'hello world' } blep // 'hello world' Copy Expression is a piece of code which evaluates to some value. First class functions The ability to use functions as data values. First order function don't take function as an argument or returns a function as output. Flip const flip = fn => a => b => fn(b)(a) Copy Functor is a data structure that can be mapped over. In other words, it's container which has an interface which can be used to apply a function to the values inside it. Higher order function is any function tat takes a function as an argument, returns a function or both. Immutability An immutable object is an object that can't be modified after it's created. Method A method is a function associated with an object. Non-determinism parallel processing + mutable state. Partial application it's a function which has some arguments fixed inside its closure scope. A function with some of its parameters fixed is to be partially applied All curried functions return partial applications. it's a function which has already been applied to some - but not yet all - of its arguments. The arguments which the function has already been applied to are called fixed parameters. Pipe const pipe = (...fns) => x => fns.reduce((y, f) => f(y), x) Copy Point-free style is a style of programming where function definitions do not make reference to the function's arguments. Pure functions given the same input, will always return the same output. Produce no side effects. Reduce (aka: fold, accumulate, reduceLeft) lets you iterate over a list, applying a function to an accumulated value and the next item in the list, until the iteration is complete and the accumulated value gets returned. Frequently, it's the most elegant way to do any non-trivial processing on a collection of items. Referentially transparent When an expression can be replaced with its corresponding value without changing the meaning of the program. REPL (Read, Eval, Print, Loop) Stream A list expressed over time. Trace const trace = label => value => { console.log(`${ label }: ${ value }`)} return value Copy const h = pipe( g, f, trace('after f') ) Copy Trie In many functional programming languages, there are special immutable data structures called trie which are effectively deep frozen - meaning no property can change, regardless of the level of the property in the object hierarchy.","keywords":""},{"title":"Deep equality in js Objects","type":0,"sectionRef":"#","url":"deep-equality-in-js-objects","content":"How to Compare Objects in JavaScript The deep equality is similar to the shallow equality, but with one difference. During the shallow check, if the compared properties are objects, a recursive shallow equality check is performed on these nested objects. function deepEqual(object1, object2) { const keys1 = Object.keys(object1); const keys2 = Object.keys(object2); if (keys1.length !== keys2.length) { return false; } for (const key of keys1) { const val1 = object1[key]; const val2 = object2[key]; const areObjects = isObject(val1) && isObject(val2); if ( areObjects && !deepEqual(val1, val2) || !areObjects && val1 !== val2 ) { return false; } } return true; } function isObject(object) { return object != null && typeof object === 'object'; } Copy","keywords":""},{"title":"Dependency Injection","type":0,"sectionRef":"#","url":"dependency injection","content":"","keywords":""},{"title":"Functional Version (with Typescript)","type":1,"pageTitle":"Dependency Injection","url":"dependency injection#functional-version-with-typescript","content":"type UsersDependencies = { usersRepository: UsersRepository mailer: Mailer logger: Logger }; export const usersService = (dependencies: UsersDependencies) => { const findAll = () => dependencies.usersRepository.findAll(); const addUser = user => { await dependencies.usersRepository.addUser(user) dependencies.logger.info(`User created: ${user}`) await dependencies.mailer.sendConfirmationLink(user) dependencies.logger.info(`Confirmation link sent: ${user}`) }; return { findAll, addUser }; } const service = usersService({ usersRepository, mailer, logger }); Copy "},{"title":"Resources","type":1,"pageTitle":"Dependency Injection","url":"dependency injection#resources","content":"Original Post "},{"title":"Deploy blog with Docusaurus","type":0,"sectionRef":"#","url":"deploy-blog-with-docusaurus","content":"","keywords":""},{"title":"Resources","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#resources","content":"DeploymentCreate a robots.txtGenerating a new SSH key "},{"title":"Testing build local","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#testing-build-local","content":"npm run build Copy npm run serve Copy or altogether npm run serve --build --port 80 --host 0.0.0.0 Copy "},{"title":"docusaurus.config.js","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#docusaurusconfigjs","content":"module.exports = { url: \"https://pages.ninja\", baseUrl: \"/\", organizationName: \"pearpages\", // Usually your GitHub org/user name. projectName: \"my-blog\", // Usually your repo name. }; Copy "},{"title":"Using a custom domain","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#using-a-custom-domain","content":"In case you want to use your custom domain for GitHub Pages, create a CNAME file in the static directory. # CNAME pearpages.ninja Copy Anything within the static directory will be copied to the root of the build directory for deployment. At this point you can also think of adding a robots.txt file. info By default, GitHub Pages runs published files through Jekyll. Since Jekyll will discard any files that begin with _, it is recommended that you disable Jekyll by adding an empty file named .nojekyll file to your static directory. This is done by default. User-agent: * Disallow: / Copy "},{"title":"Configuring and apex domain (Using a DNS provider)","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#configuring-and-apex-domain-using-a-dns-provider","content":"GitHub Docs # the IPs are pointing now to GitHub A @ 185.199.108.153 600 seconds A @ 185.199.109.153 1 hour A @ 185.199.110.153 1 hour A @ 185.199.111.153 1 hour # www.yourdomain.com and yourdomain.com point to the same place CNAME www @ 1 hour Copy Once your DNS provider points to GitHub you will be able to use https feature from GitHub. "},{"title":"Manual deploy","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#manual-deploy","content":"It is going to publish to gh-pages using the current branch. GIT_USER=pearpages npm run deploy Copy "},{"title":"Automatic deploy using github actions","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#automatic-deploy-using-github-actions","content":"Generating a new SSH key Use a SSH key (an existing - but not used in GitHub - o create new one) Paste it as a deploy key # public key pbcopy < ~/.ssh/key.pub Copy Paste the private key as GitHub secret. Using name GH_PAGES_DEPLOY # private key pbcopy < ~/.ssh/key Copy Create the workflow file in .github/workflows/publishing.yml name: publishing on: pull_request: branches: [master] push: branches: [master] jobs: checks: if: github.event_name != 'push' runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - uses: actions/setup-node@v1 with: node-version: '12.x' - name: Test Build run: | if [ -e yarn.lock ]; then yarn install --frozen-lockfile elif [ -e package-lock.json ]; then npm ci else npm i fi npm run build gh-release: if: github.event_name != 'pull_request' runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - uses: actions/setup-node@v1 with: node-version: '12.x' - name: Add key to allow access to repository env: SSH_AUTH_SOCK: /tmp/ssh_agent.sock run: | mkdir -p ~/.ssh ssh-keyscan github.com >> ~/.ssh/known_hosts echo \"${{ secrets.GH_PAGES_DEPLOY }}\" > ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa cat <<EOT >> ~/.ssh/config Host github.com HostName github.com IdentityFile ~/.ssh/id_rsa EOT - name: Release to GitHub Pages env: USE_SSH: true GIT_USER: git run: | git config --global user.email \"actions@gihub.com\" git config --global user.name \"gh-actions\" if [ -e yarn.lock ]; then yarn install --frozen-lockfile elif [ -e package-lock.json ]; then npm ci else npm i fi npx docusaurus deploy Copy "},{"title":"Edit links pointing to your repo","type":1,"pageTitle":"Deploy blog with Docusaurus","url":"deploy-blog-with-docusaurus#edit-links-pointing-to-your-repo","content":"This was you can publish directly from github web. { presets: [ [ '@docusaurus/preset-classic', { docs: { sidebarPath: require.resolve('./sidebars.js'), // Please change this to your repo. editUrl: 'https://github.com/pearpages/my-blog/edit/master/' }, blog: { showReadingTime: true, // Please change this to your repo. editUrl: 'https://github.com/pearpages/my-blog/edit/master/' }, theme: { customCss: require.resolve('./src/css/custom.css'), }, }, ], ], } Copy "},{"title":"Docker core concepts","type":0,"sectionRef":"#","url":"docker-core-concepts","content":"","keywords":""},{"title":"TL;DR","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#tldr","content":"Docker runs an application such as MySQL in a singlecontainer.Your web application will probably require several containers your code (and runtime)a databasea web server, etc. A container is launched from an image.Containers start in clean (image) state so data is not permanently stored.Containers are isolated from the host and other containers.Each container is started with a single Docker command.Optionally, orchestration tools such as Docker Swarm and Kubernetes can be used for container management and replication on production systems. "},{"title":"Containers","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#containers","content":"It helps to think of a container as a mini VM with its own operating system, libraries, and application files. Docker emulates an Operating System so you can run isolated applications within their own file system. Docker therefore uses fewer host OS resources than a VM. You should therefore use separate containers for your application, the database, and any other dependencies you require. Containers are isolated Each running container is available at localhost or 127.0.0.1 , but a TCP port must be exposed to use it, e.g. Containers are stateless and disposable Data written to the container’s file system is lost the moment it is shuts down! Docker offers volumes and host folder bind mounts. Containers run on Linux It doesn’t matter what host OS you’re using:Docker containers run natively on Linux. For that reason, Windows and macOS run Docker containers inside a Linux VM! "},{"title":"Images","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#images","content":"A Docker image is a snapshot of a file and operating system with libraries and application executables. In essence, an image is a recipe or template for creating a container. (In a similar way that some computer languages let you define a reusable class template for instantiating objects of the same type.) Any number of containers can be started from a single image. This permits scaling on production servers, although you’re unlikely to launch multiple containers from the same image during development. The Docker Hub provides a repository of common images for popular applications such asNGINX,MySQL,MongoDB,Elasticsearch,redisand more. "},{"title":"Dockerfile","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#dockerfile","content":"OSwork directories and user permissionsenvironment variables, copying files from host, running install processes, etc.volumes for data storagenetwork configuration and ports exposed to localhostlaunch command "},{"title":"Volumes","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#volumes","content":"Some containers – such as databases – absolutely must retain data so Docker provides two storage mechanism types: Volumes: a Docker-managed file system, andBind mounts: a file or directory on the host machine. Volumes are the recommended way to persist data. In some cases, it’s the only option – for example, MongoDB does not currently support bind mounts on Windows or macOS file systems. "},{"title":"Networks","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#networks","content":"Docker creates a virtual network and assigns each running container a unique IP address. It’s then possible for one container to communicate with another using its address. An easier option is to create your own Docker virtual network. Any container added to that network can communicate with another using its name, i.e. mysql:3306 resolves to the correct address. Container TCP/IP ports can be exposed: within the virtual network only, orwithin the virtual network and to the host. "},{"title":"Docker Compose","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#docker-compose","content":"An application requiring Node.js, NGINX, and MongoDB containers is started with three commands – possibly executed in three terminals in the correct order (probably MongoDB, then the Node.js application, then NGINX). Docker Compose is a tool for managing multiple containers with associated volumes and networks. A single configuration file, normally named docker-compose.yml , defines the containers and can override Dockerfile settings where necessary. It’s practical to create a Docker Compose configuration for development. You could also create one for production, but there are better options… "},{"title":"Orchestration","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#orchestration","content":"Containers are portable and reproducible. This allows you to scale a single application by launching identical containers on the same server, another server, or even a different data center on the other side of the world. "},{"title":"Docker client-server application","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#docker-client-server-application","content":"The server is responsible for container management and is controlled via a REST API. The command-line interface communicates with this API, so it’s possible to run a server daemon anywhere and connect from another device. This rarely matters during development: the Docker server and CLI is installed on the same PC. "},{"title":"When not to use Docker","type":1,"pageTitle":"Docker core concepts","url":"docker-core-concepts#when-not-to-use-docker","content":"Your application is not statelessYou are using a Windows ServerPerformance is criticalStability is importantTo store mission-critical dataTo improve securityTo create GUI applicationsBecause Docker is cool "},{"title":"Ecmascript","type":0,"sectionRef":"#","url":"ecmascript","content":"","keywords":""},{"title":"Differences in browser support","type":1,"pageTitle":"Ecmascript","url":"ecmascript#differences-in-browser-support","content":"With regards to browser support, people usually talk about “ECMAScript compatibility” rather than “JavaScript compatibility”. "},{"title":"Resources","type":1,"pageTitle":"Ecmascript","url":"ecmascript#resources","content":"What’s the difference between JavaScript and ECMAScript? "},{"title":"ES6 Object Destructuring Default Parameters","type":0,"sectionRef":"#","url":"es6-object-destructuring-default-parameters","content":"","keywords":""},{"title":"Resources","type":1,"pageTitle":"ES6 Object Destructuring Default Parameters","url":"es6-object-destructuring-default-parameters#resources","content":"ES6 Object Destructuring Default Parameters "},{"title":"Flair Espresso Signature","type":0,"sectionRef":"#","url":"flair-espresso-signature","content":"The espresso machine I want to try. The Signature Series of the Flair Espresso Maker is a step up from the Classic in terms of styling, beauty, and aesthetics. Featuring either a brushed chrome, a matte black or our new white finish and our Signature copper-plated portafilter base, any Flair Signature will be the centerpiece of your kitchen or coffee station. Each Signature comes ready with a stainless steel screen, our Bottomless 2-in-1 Portafilter, and our custome pressure gauge, to produce the very best in espresso. Official PageFlair Espresso Signature in BeanGreen","keywords":""},{"title":"Favicons","type":0,"sectionRef":"#","url":"favicons","content":"","keywords":""},{"title":"sizes (px)","type":1,"pageTitle":"Favicons","url":"favicons#sizes-px","content":""},{"title":"Web (main/general)","type":1,"pageTitle":"Favicons","url":"favicons#web-maingeneral","content":"16x16: browser favicon32x32: taskbar shortcut icon (used by default by Docusaurus)96x96: desktop shortcut icon (and Google TV) <link rel=\"icon\" type=\"image/png\" href=\"https://cdn.yourwebsite.com/favicon-16x16.png\" sizes=\"16x16\"> <link rel=\"icon\" type=\"image/png\" href=\"https://cdn.yourwebsite.com/favicon-32x32.png\" sizes=\"32x32\"> <link rel=\"icon\" type=\"image/png\" href=\"https://cdn.yourwebsite.com/favicon-96x96.png\" sizes=\"96x96\"> Copy "},{"title":"Apple touch icons","type":1,"pageTitle":"Favicons","url":"favicons#apple-touch-icons","content":"120x120: iPhone Retina (iOS 7)180x180: iPhone 6 Plus (iOS 8+)152x152: iPad Retina (iOS 7)167x167: iPad Pro (iOS 8+) Do you actually need to declare these HTML tags in the <head>? No. As long as the touch icons are uploaded to the root folder of the website, Apple will know to look for them there, however, other operating systems also use these icons — even Android! It’s better to define them in the <head>. <link rel=\"apple-touch-icon\" href=\"older-iPhone.png\"> // 120px <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"iPhone-6-Plus.png\"> <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"iPad-Retina.png\"> <link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"iPad-Pro.png\"> Copy "},{"title":"Windows","type":1,"pageTitle":"Favicons","url":"favicons#windows","content":"70x70270x270310x310310x150 A browserconfig.xml file with the following code should be uploaded to the root directory of your website <?xml version=\"1.0\" encoding=\"utf-8\"?> <browserconfig> <msapplication> <tile> <square70x70logo src=\"https://cdn.yourwebsite.com/mstile-70x70.png\"/> <square150x150logo src=\"https://cdn.yourwebsite.com/mstile-270x270.png\"/> <square310x310logo src=\"https://cdn.yourwebsite.com/mstile-310x310.png\"/> <wide310x150logo src=\"https://cdn.yourwebsite.com/mstile-310x150.png\"/> <TileColor>#2b5797</TileColor> </tile> </msapplication> </browserconfig> Copy "},{"title":"Other","type":1,"pageTitle":"Favicons","url":"favicons#other","content":"128x128: Chrome Webstore icon196x196: Android Chrome icon228x228: Opera Coast icon "},{"title":"The Essential Meta Tags for Social Media","type":1,"pageTitle":"Favicons","url":"favicons#the-essential-meta-tags-for-social-media","content":"The Essential Meta Tags for Social Media "},{"title":"In Docusaurus","type":1,"pageTitle":"Favicons","url":"favicons#in-docusaurus","content":"Faviconflaticon <!-- autogenerated by Docusaurus --> <link rel=\"shortcut icon\" href=\"/img/favicon.png\" data-react-helmet=\"true\"> Copy module.exports = { favicon: 'https://v2.docusaurus.io/favicon.ico', }; Copy "},{"title":"Resources","type":1,"pageTitle":"Favicons","url":"favicons#resources","content":"Here's Everything You Need to Know About Favicons in 2020Apple's official documentation) "},{"title":"How to install docker","type":0,"sectionRef":"#","url":"how-to-install-docker","content":"","keywords":""},{"title":"Install Docker on macOS","type":1,"pageTitle":"How to install docker","url":"how-to-install-docker#install-docker-on-macos","content":"Docker Desktop for Mac OS Sierra 10.13 and above can be downloaded from Docker Hub. The package includes the Docker server, CLI, Docker Compose, Docker Swarm, and Kubernetes. Two editions are available: stable and edge with experimental features. The stable version is best for most developers. Double-click Docker.dmg to open the installer.  "},{"title":"Test your Docker installation","type":1,"pageTitle":"How to install docker","url":"how-to-install-docker#test-your-docker-installation","content":"docker version Copy docker-compose version Copy docker run hello-world Copy "},{"title":"How to remove array duplicates in ES6","type":0,"sectionRef":"#","url":"how-to-remove-array-duplicates-in-es6","content":"","keywords":""},{"title":"1. Using Set","type":1,"pageTitle":"How to remove array duplicates in ES6","url":"how-to-remove-array-duplicates-in-es6#1-using-set","content":"Set is a new data object introduced in ES6. Because Set only lets you store unique values. When you pass in an array, it will remove any duplicate values. It's very simple, very quick and elegant, but I don't think it might be very performant; so I would use it for small arrays. const array = [4, 1, 2, 4, 4, 3] const uniqueSet = new Set(array) const backToArray = [...uniqueSet] Copy "},{"title":"2. Using filter","type":1,"pageTitle":"How to remove array duplicates in ES6","url":"how-to-remove-array-duplicates-in-es6#2-using-filter","content":"Very smart and short solution. Because indexOf will return the first appearance, only the first unique value will stay in the new returning array. const array = [4, 1, 2, 4, 4, 3] array.filter((item, index) => array.indexOf(item) === index) Copy "},{"title":"Getting the duplicates","type":1,"pageTitle":"How to remove array duplicates in ES6","url":"how-to-remove-array-duplicates-in-es6#getting-the-duplicates","content":"array.filter((item, index) => array.indexOf(item) !== index) Copy "},{"title":"3. Using reduce","type":1,"pageTitle":"How to remove array duplicates in ES6","url":"how-to-remove-array-duplicates-in-es6#3-using-reduce","content":"const array = [4, 1, 2, 4, 4, 3] array.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []) Copy "},{"title":"Introduction to Docker","type":0,"sectionRef":"#","url":"introduction-to-docker","content":"","keywords":""},{"title":"Serverless web applications","type":1,"pageTitle":"Introduction to Docker","url":"introduction-to-docker#serverless-web-applications","content":"Docker can be used in development environments to: run build processes such as JavaScript module bundling and Sass preprocessingserve the web application, andemulate infrastructures for serverless function testing. "},{"title":"Static sites","type":1,"pageTitle":"Introduction to Docker","url":"introduction-to-docker#static-sites","content":"A static site is constructed using a build process which places content (markdown files, JSON data, database fields, etc.) into templates to create folders of static HTML, CSS, JavaScript, and media files. Those pre-rendered files can be deployed anywhere: no server-side runtime or database is required. Static sites are often referred to as the JAMstack(JavaScript, APIs, and Markdown). All content is pre-rendered where possible, but dynamic services such as a site search can adopt server-based APIs. "},{"title":"Javascript influential books","type":0,"sectionRef":"#","url":"js-influential-books","content":"","keywords":""},{"title":"Resources","type":1,"pageTitle":"Javascript influential books","url":"js-influential-books#resources","content":"12 Books Every JavaScript Developer Should Read by Eric EliottTop 20 of Best JavaScript Books Recommended Most Times by Javascript Pros "},{"title":"The List","type":1,"pageTitle":"Javascript influential books","url":"js-influential-books#the-list","content":"JavaScript for Kids: A Playful Introduction to Programming by Nick Morgan   Composing Software by Eric Elliott   Eloquent JavaScript: A Modern Introduction to Programming by Marijn Haverbeke   JavaScript: The Good Parts by Douglas Crockford   Programming JavaScript Applications: Robust Web Architecture with Node, HTML5, and Moderns JS Libraries by Eric Elliott   Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript by David Herman   JavaScript: The Definitive Guide by David Flanagan   You Don’t Know JS by Kyle Simpson| Free First Edition Online Book| Free Second Edition Online Book   JavaScript Allongé: The Six Edition by Reginald Braithwaite | Free Book Online   Node.js in Action by Mike Cantelon, Marc Harter, TJ Holowaychuk, and Nathan Rajlich   High Performance Browser Networking by Ilya Grigorik| Free Book Online   Web Audio API by Boris Smus   JavaScript Patterns: Build Better Applications with Coding and Design Patterns by Stoyan Stefanov   Beginning JavaScript And CSS Development with jQuery by Richard York   JavaScript Programmer’s Reference by Alexei White   Secrets of the JavaScript Ninja by John Resig and Bear Bibeault   Learning Javascript Design Patterns by Addy Osmani   High Performance JavaScript by Nicholas C. Zakas   "},{"title":"Javascript Functions","type":0,"sectionRef":"#","url":"js-functions","content":"","keywords":""},{"title":"Function Objects","type":1,"pageTitle":"Javascript Functions","url":"js-functions#function-objects","content":"Functions in javascript are objects. Objects produced from object literals are linked to Object.prototype. Function objects are linked to Function.prototype (which is linked to Object.prototype). Every function is also created with two additional hidden properties: the function's context and the code that implements the function's behavior: prototypecontext (this)code implementation Every function object is created with a prototype property. Its value is an object with a constructor property whose value is the function. **This is distinct from the hidden link to Function.prototype. Since functions are objects, they can be used like any other value. Also, since functions are objects, functions can have methods. const helloWorld = function () { console.log('hello World') } const goodByeWorld = function () { console.log('Goodbye World') } const callMyFunctions = function (...myFunctions) { myFunctions.forEach(fn => fn()) } callMyFunctions(helloWorld, goodByeWorld) // 'hello World', 'Goodbye World' Copy "},{"title":"Function Literal","type":1,"pageTitle":"Javascript Functions","url":"js-functions#function-literal","content":"Function objects are created with function literals: const add = function (a, b) { return a + b; } Copy reserved word functionoptional function nameparametersstatements A function literal can appear anywhere that an expression can appear. Functions can be defined inside other functions. An inner function of course has access to its parameters and variables. An inner function also enjoys access to the parameters and variables of the functions it is nested within. The function object created by a function literal contains a link to that outer context. This is called closure. "},{"title":"Invocation","type":1,"pageTitle":"Javascript Functions","url":"js-functions#invocation","content":"Invoking a function suspends the execution of the current function, passing control and parameters to the new function. In addition to the declared parameters, every function receives two additional parameters: this and arguments. function myFunction(a, b, c, d) { console.log(a, b, c, d) } myFunction(1, 2) // 1, 2, undefined, undefined Copy The this parameter value is determined by the invocation pattern. There are four patterns of invocation in Javascript. The patterns differ in how the bonus parameter this is initialized: the method invocationthe function invocationthe constructor invocationthe apply invocation "},{"title":"1. The Method Invocation Pattern","type":1,"pageTitle":"Javascript Functions","url":"js-functions#1-the-method-invocation-pattern","content":"When a function is stored as a property of an object, we call it a method. When a method is invoked, this is bound to that object. const myObject = { value: 0, increment: function (inc) { this.value += typeof inc === \"number\" ? inc : 1; } }; myObject.increment(); // 1 console.log(myObject.value); myObject.increment(); // 2 console.log(myObject.value); myObject.increment(4); console.log(myObject.value); // 6 Copy "},{"title":"2. The Function Invocation Pattern","type":1,"pageTitle":"Javascript Functions","url":"js-functions#2-the-function-invocation-pattern","content":"When a function is not the property of an object, then is invoked as a function: function add(a, b) { return a + b; } const sum = add(3, 4) // 7 Copy When a function is invoked with this pattern, this is bound to the global (window/global) object. This was a mistake in the design of the language. A consequence of this error is that a method cannot employ an inner function to help it do its work because the inner function does not share the method's access to the object as its this is bound to th wrong (global) value. function add(a, b) { return a + b; } window.value = 5 // global object const myObject = { value: 2, double: function () { const helper = function () { this.value = add(this.value, this.value); }; helper(); } }; myObject.double(); console.log(myObject.value); // 2 console.log(window.value); // 10, global object has been updated Copy function add(a, b) { return a + b; } const myObject = { value: 2, double: function () { const that = this; // Workaround const helper = function () { that.value = add(that.value, that.value); }; helper(); } }; myObject.double(); console.log(myObject.value); // 4 Copy "},{"title":"3. The Constructor Invocation Pattern","type":1,"pageTitle":"Javascript Functions","url":"js-functions#3-the-constructor-invocation-pattern","content":"If a function is invoked with the new prefix, then a new object will be created with a hidden link to the value of the function's prototype member, and this will be bound to that object. const quo = function (string) { this.status = string; } quo('hello') // as explained in the Function Invocation Pattern, this is bound to the **global** object console.log(window.status) // 'hello' Copy Functions that are intended to be used with the new prefix are called constructors. By convention, they are kept in variables with a capitalized name. const Quo = function (string) { this.status = string; } Quo.prototype.getStatus = function () { return this.status; } const aQuo = new Quo('confused'); console.log(aQuo.getStatus()) Copy Use of this style of constructor functions is not recommended. "},{"title":"4. The Apply Invocation Pattern","type":1,"pageTitle":"Javascript Functions","url":"js-functions#4-the-apply-invocation-pattern","content":"The apply method lets us construct an array of arguments to use to invoke a function. It also lets us choose the value of this. The apply method takes two parameters. The first is the value that should be bound to this. The second is an array of parameters. const add = function (a, b) { return a + b; } const sum = add.apply(null, [3, 4]) // this, parameters[] console.log(sum) // 7 Copy const Quo = function (string) { this.status = string; } Quo.prototype.getStatus = function () { return this.status; } const statusObject = { status: 'OK' } const status = Quo.prototype.getStatus.apply(statusObject); // statusObject is the **this** and no parameters[] needed console.log(status); // 'OK' const status2 = Quo.prototype.getStatus.call(statusObject); // call also uses the **this** and the arguments follow separated by comas console.log(status2); // 'OK' Copy "},{"title":"Arguments","type":1,"pageTitle":"Javascript Functions","url":"js-functions#arguments","content":"A bons parameter that is available to functions when they are invoked is the arguments 'array'. It gives the function access to all the arguments that were supplied with the invocation, including excess arguments that were not assigned to parameters. Because of a design error, arguments is not really an array. function myFunction() { console.log(arguments.length); console.log(arguments); } myFunction(1, 2, 3, 4, 5, 6); // 6 // [1, 2, 3, 4, 5, 6] Copy function sum() { return [...arguments].reduce((current, total) => total += current, 0); } console.log(sum(1, 2, 3, 4, 5, 6, 7, 8)); // 36 Copy "},{"title":"Return","type":1,"pageTitle":"Javascript Functions","url":"js-functions#return","content":"A function always returns a value. If the return value is not specified, the undefined is returned. If the function was invoked with the new prefix and the return value is not an object, then this (the new object) is return instead. function a() { return 'a'; } function un() {} console.log(a()); // 'a' console.log(un()); // undefined Copy function Car(driver, doors) { this.driver = driver; this.doors = doors; } console.log(new Car('Pere', 4)) // Car Copy function Car(driver, doors) { this.driver = driver; this.doors = doors; return { hello: 'hello', ref: this } } console.log(new Car('Pere', 4)) // {hello: 'hello', ref: Car} Copy "},{"title":"Exceptions","type":1,"pageTitle":"Javascript Functions","url":"js-functions#exceptions","content":"function add(a, b) { if (typeof a !== 'number' || typeof b !== 'number') { throw { name: 'TypeError', message: 'add needs numbers' } } return a + b; } Copy const error = new Error('something went wrong') console.log(error.name) // 'Error' console.log(error.message) // 'something went wrong' Copy "},{"title":"Augmenting Types","type":1,"pageTitle":"Javascript Functions","url":"js-functions#augmenting-types","content":"Javascript allows the basic types of the language to be augmented. We can add a method to prototype and that makes it available to all the objects. Function.prototype.method = function (name, func) { this.prototype[name] = func; return this; } Number.method('integer', function () { return Math[this < 0 ? 'ceil' : 'floor'](this); }) (-10/3).integer(); // -3 Copy Function.prototype.method = function (name, func) { this.prototype[name] = func; return this; } String.method('trim', function () { return this.replace(/^\\s+|\\s+$/g, '') }) const aString = \" \" + \" neat \";; console.log(aString.trim()) // Copy Becuase of the dy namic nature of Javascript's prototypal inheritance, all values are immediately endowed with the new methods, even values that were created before the methods were created. "},{"title":"Recursion","type":1,"pageTitle":"Javascript Functions","url":"js-functions#recursion","content":"A recursive function is a function that calls itself, either directly or indirectly. "},{"title":"The towers of Hanoi","type":1,"pageTitle":"Javascript Functions","url":"js-functions#the-towers-of-hanoi","content":"function hanoi(disc, src, aux, dst) { if (disc > 0) { hanoi(disc - 1, src, dst, aux); document.writeln(`Move disc ${disc} from ${src} to ${dst} <br/>`); hanoi(disc - 1, aux, src, dst); } } hanoi(3, 'Src', 'Aux', 'Dst'); Copy "},{"title":"Walk the DOM","type":1,"pageTitle":"Javascript Functions","url":"js-functions#walk-the-dom","content":"Recursive functions can be very effective in manipulating tree structures such as the browser's Document Object Model (DOM). function walkTheDOM(node, func) { func(node) node = node.firstChild while (node) { walkTheDOM(node, func) node = node.nextSibling } } Copy "},{"title":"Tail recursion optimization","type":1,"pageTitle":"Javascript Functions","url":"js-functions#tail-recursion-optimization","content":"Some languages offer the tail recursion optimization. This means that if a function returns the result of invoking itself recursively, then the invocation is replaced with a loop, which can significantly speed things up. Tail-call optimization is a part of the ES2015-ES6 specification. "},{"title":"Scope","type":1,"pageTitle":"Javascript Functions","url":"js-functions#scope","content":"Scope in a programming language controls the visibility and lifetimes of variables and parameters. Javascript does have function scope. That means that the parameters and variables defined in a function are not visible outside of the function. "},{"title":"Closure","type":1,"pageTitle":"Javascript Functions","url":"js-functions#closure","content":"The good news about scope is that inner functions get access to the parameters and variables of the functions they are defined within (with the exception of this and arguments). An interesting case is when the innfer function has a longer lifetime than its outer function. const isNumber = value => typeof value === 'number' const myObject = (function () { let value = 0 return { increment: (inc) => value += isNumber(inc) ? inc : 1, getValue: () => value } }()) myObject.increment() myObject.increment() myObject.increment() console.log(myObject.getValue()) Copy function quo (status) { return { getStatus: () => status } } const myQuo = quo('amazed') console.log(myQuo.getStatus()) Copy This is possible beacuse the function has access to the context in which it was created. This is called closure. "},{"title":"Callbacks","type":1,"pageTitle":"Javascript Functions","url":"js-functions#callbacks","content":"Providing a function that will be invoked when the asynchronous task is finished. const request = prepareTheRequest() const myCallback = response => display(response) sendRequestAsynchronously(request, myCallback) Copy "},{"title":"Module","type":1,"pageTitle":"Javascript Functions","url":"js-functions#module","content":"A module is a function or object that presents an interface but hides its state and implementation. The module pattern takes advantage of function scope and closure to create relationships that are binding and private. "},{"title":"Cascade","type":1,"pageTitle":"Javascript Functions","url":"js-functions#cascade","content":"If we have methods returning this instead of undefined we can enable cascades. getElement('myBoxDiv') .move(350, 150) .width(100) .height(100) .color('red') .border('10px outset') .padding('4px') .appendText('Please stand by'); Copy "},{"title":"Curry","type":1,"pageTitle":"Javascript Functions","url":"js-functions#curry","content":"Currying allows us to produce a new function by combining a function an argument. "},{"title":"Memoization","type":1,"pageTitle":"Javascript Functions","url":"js-functions#memoization","content":"Functions can use objects to remember the results of previous operations, making it possible to avoid unnecessary work. "},{"title":"Resources","type":1,"pageTitle":"Javascript Functions","url":"js-functions#resources","content":"Javascript The Good Parts by Douglas Crockford "},{"title":"Javascript Objects","type":0,"sectionRef":"#","url":"js-objects","content":"","keywords":""},{"title":"Object literals","type":1,"pageTitle":"Javascript Objects","url":"js-objects#object-literals","content":"const empty_object = {} Copy const aPerson = { firstName: 'Pere', lastName: 'Pages' } Copy "},{"title":"Retrieval","type":1,"pageTitle":"Javascript Objects","url":"js-objects#retrieval","content":"const aPerson = { firstName: 'Pere', lastName: 'Pages' } console.log(aPerson.firstName) // 'Pere' console.log(aPerson.lastName) // 'Pages' console.log(aPerson.whatever) // undefined console.log(aPerson.nickname || 'pearpages') // pearpages Copy "},{"title":"Update","type":1,"pageTitle":"Javascript Objects","url":"js-objects#update","content":"If the property name already exists in the object, the property is replaced. If the object does not already have that property name, the object is augmented. const aPerson = { firstName: 'Pere', lastName: 'Pages' } aPerson.fistName = 'Pear' // from 'Pere' to 'Pear' aPerson.middleName = 'Joan' // from 'undefined' to 'Joan' Copy "},{"title":"Reference","type":1,"pageTitle":"Javascript Objects","url":"js-objects#reference","content":"Objects are passed around by reference. They are never copied. const bar = { a: 1, b: 2 } const foo = { ref: bar } foo.ref.a = 3 console.log(bar.a) // 3 Copy "},{"title":"Prototype","type":1,"pageTitle":"Javascript Objects","url":"js-objects#prototype","content":"Every object is linked to a prototype object from which it can inherit properties (a). All objects create from object literals are linked to Object.prototype, an object that comes standard with Javascript. The prototype link has no effect on updating. When we make changes to an object, the object's prototype is not touched (b). The prototype link is used only in retrieval. If we try to retrieve a property value from an object, and if the object lacks the property name, then Javascript attempts to retrieve the property value from the prototype object. This is called delegation (c). const bar = { a: 1, b: 2 } const foo = Object.create(bar) // example of (a) console.log(foo) // {} console.log(foo.a) // 1; example of (c) console.log(foo.__proto__.a) // 1 bar.a = 3 console.log(foo.a) // 3 foo.a = 5 // example of (b) console.log(foo.a) // 5 console.log(bar.a) // 3 delete foo.a // true; no longer foo has -a- as an -ownProperty- console.log(foo.a) // 3; example of (c) Copy "},{"title":"Reflection","type":1,"pageTitle":"Javascript Objects","url":"js-objects#reflection","content":"const bar = { a: 1, b: 2 } const aPerson = { firstName: 'Pere', lastName: 'Pages' } typeof bar.a // 'number' typeof bar.b // 'number' typeof aPerson.firstName // 'string' Copy const bar = { a: 1, b: 2 } const foo = Object.create(bar) bar.hasOwnProperty('a') // true foo.hasOwnProperty('a') // false console.log(foo.a) // 1 Copy "},{"title":"Enumeration: for in, Object.keys and Object.values","type":1,"pageTitle":"Javascript Objects","url":"js-objects#enumeration-for-in-objectkeys-and-objectvalues","content":"The for in statement can loop over all the property names in an object. Object.keys only will get the hasOwnProperty(key) === true. const bar = { a: 1, b: 2, m1: () => 'hello' } const foo = Object.create(bar) foo.c = 3 foo.d = 4 const geez = Object.create(foo) for (let name in foo) { console.log(name) } // c, d, a, b, m1 for (let name in foo) { console.log(foo.hasOwnProperty(name)) } // true, true, false, false, false for (let name in geez) { console.log(geez.hasOwnProperty(name)) } // false, false, false, false, false console.log(Object.keys(bar)) // ['a', 'b', 'm1'] console.log(Object.keys(foo)) // ['c', 'd'] console.log(Object.keys(geez)) // [] console.log(Object.values(bar)) // ['a', 'b', function] Copy "},{"title":"Keys","type":1,"pageTitle":"Javascript Objects","url":"js-objects#keys","content":"The Object.keys(object)function can take all of the names of the own (but not inherited) properties in an object and return them as an array of strings. The strings in the array will be in the order in which they were inserted. "},{"title":"Delete","type":1,"pageTitle":"Javascript Objects","url":"js-objects#delete","content":"The delete operator can be used to remove a property from an object. It will remove a property from the object if it has one. It will not touch any of the objects in the prototype linkage. see delete example in the prototype section. "},{"title":"Inheritance","type":1,"pageTitle":"Javascript Objects","url":"js-objects#inheritance","content":"In Javascript, an object can be made that inherits from another object Object.create(prototype). When assigning to an object, only the top-most object is changed. No changes are made to objects on the prototype chain. The most popular use of prototypes is as a place to store functions. Object.create(prototype) inherits from the prototype parameter object and the Object.prototype. But Object.create(null) does not inherit any thing. Object.assign(Object.create({}), prototype) is preferable to Object.create(prototype). It is all about how much you want to 'inherit'. Object.create({}) does not inherit from Object.prototype but {} the Object literal does (check to proto property). "},{"title":"toString","type":1,"pageTitle":"Javascript Objects","url":"js-objects#tostring","content":"If you want to convert an object into a string JSON.stringify does a much better job. JSON.stringify(myObj, null, 2) Copy "},{"title":"Copy","type":1,"pageTitle":"Javascript Objects","url":"js-objects#copy","content":"const bar = { a: 1, b: 2 } const foo = Object.assign({}, bar) Copy const bar = { a: 1, b: 2 } const foo = {...bar} Copy "},{"title":"Freeze","type":1,"pageTitle":"Javascript Objects","url":"js-objects#freeze","content":"Object.freeze(object). This is not a deep freeze. Only the top level object is frozen. "},{"title":"WeakMap","type":1,"pageTitle":"Javascript Objects","url":"js-objects#weakmap","content":"Allows objects as keys. "},{"title":"this","type":1,"pageTitle":"Javascript Objects","url":"js-objects#this","content":"In most cases, the value of this is determined by how a function is called (runtime binding). "},{"title":"Example with methods","type":1,"pageTitle":"Javascript Objects","url":"js-objects#example-with-methods","content":"const myObj = { store: 0, increase: function () { this.store = this.store + 1; }, decrease: function () { this.store = this.store - 1; } }; console.log(myObj.store); // 0 myObj.increase(); myObj.increase(); myObj.increase(); myObj.increase(); console.log(myObj.store); // 4 myObj.decrease(); myObj.decrease(); console.log(myObj.store); // 2 Copy "},{"title":"Trying to access this before execution time","type":1,"pageTitle":"Javascript Objects","url":"js-objects#trying-to-access-this-before-execution-time","content":"const thisExample = { firstName: \"Pere\", lastName: \"Pages\", completeName: this.firstName + \" \" + this.lastName, // not going to work. this can't resolve yet getCompleteName: function () { return this.firstName + \" \" + this.lastName; // it's going to work, because it will bind at execution time } }; console.log(thisExample.completeName); // undefined undefined console.log(thisExample.getCompleteName()); // 'Pere Pages' Copy "},{"title":"Resources","type":1,"pageTitle":"Javascript Objects","url":"js-objects#resources","content":"Javascript The Good Parts (2008) by Douglas CrockfordHow Javascript Works (2018) by Douglas Crockford "},{"title":"Multiple users in gitconfig","type":0,"sectionRef":"#","url":"multiple-users-in-gitconfig","content":"","keywords":""},{"title":"1. Configure an individual repo which overrides the global configuration","type":1,"pageTitle":"Multiple users in gitconfig","url":"multiple-users-in-gitconfig#1-configure-an-individual-repo-which-overrides-the-global-configuration","content":"git config user.name \"Your Name Here\" git config user.email your@email.com Copy Whereas the default user/email is configured in your ~/.gitconfig git config --global user.name \"Your Name Here\" git config --global user.email your@email.com Copy "},{"title":"2. Use conditional includes","type":1,"pageTitle":"Multiple users in gitconfig","url":"multiple-users-in-gitconfig#2-use-conditional-includes","content":"In the global config ~/.gitconfig [user] name = John Doe email = john@doe.tld [includeIf \"gitdir:~/work/\"] path = ~/work/.gitconfig Copy Work specific config ~/work/.gitconfig [user] email = john.doe@company.tld Copy "},{"title":"My favorite Corgi meme","type":0,"sectionRef":"#","url":"my-favorite-corgi-meme","content":"","keywords":""},{"title":"Bonus","type":1,"pageTitle":"My favorite Corgi meme","url":"my-favorite-corgi-meme#bonus","content":" "},{"title":"NPM tricks","type":0,"sectionRef":"#","url":"npm-tricks","content":"","keywords":""},{"title":"Open a package’s homepage","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#open-a-packages-homepage","content":"npm home $package Copy "},{"title":"Open package’s GitHub repo","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#open-packages-github-repo","content":"npm repo $package Copy "},{"title":"Check for outdated dependencies","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#check-for-outdated-dependencies","content":"npm outdated Copy "},{"title":"Check for packages not declared in package.json","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#check-for-packages-not-declared-in-packagejson","content":"When you run prune, the npm CLI will run through your package.json and compare it to your project’s /node_modules directory. It will print a list of modules that aren’t in your package.json. npm prune Copy "},{"title":"Lock down your dependencies versions","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#lock-down-your-dependencies-versions","content":"npm shrinkwrap Copy Using shrinkwrap in your project generates an npm-shrinkwrap.json file. This allows you to pin the dependencies of your project to the specific version you’re currently using within your node_modules directory. When you run npm install and there is a npm-shrinkwrap.json present, it will override the listed dependencies and any semver ranges in package.json. "},{"title":"Allow npm install -g without needing sudo","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#allow-npm-install--g-without-needing-sudo","content":"npm config set prefix $dir Copy After running the command, where $dir is the directory you want npm to install your global modules to, you won’t need to use sudo to install modules globally anymore. The directory you use in the command becomes your global bin directory. The only caveat: you will need to make sure you adjust your user permissions for that directory with chown -R $USER $dir and you add $dir/bin to your PATH. "},{"title":"Change the default save prefix for all your projects","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#change-the-default-save-prefix-for-all-your-projects","content":"npm config set save-prefix=\"~\" Copy The tilde (~) is more conservative than what npm defaults to, the caret (^), when installing a new package with the --save or --save-dev flags. The tilde pins the dependency to the minor version, allowing patch releases to be installed with npm update. The caret pins the dependency to the major version, allowing minor releases to be installed with npm update. "},{"title":"Check for more tricks","type":1,"pageTitle":"NPM tricks","url":"npm-tricks#check-for-more-tricks","content":"11 Simple npm Tricks That Will Knock Your Wombat Socks Off "},{"title":"MySQL database with Docker","type":0,"sectionRef":"#","url":"mysql-with-docker","content":"","keywords":""},{"title":"Installing an image","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#installing-an-image","content":"# latest docker pull mysql # or any version using semantic versioning docker pull mysql:8.0.22 Copy "},{"title":"Launching the container","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#launching-the-container","content":"All Docker CLI commands start with docker and an instruction such as run followed by options. docker run creates a container from a specified image ( mysql ) and starts it. That image is downloaded if it’s not already available on the host. docker run \\ -it --rm --name mysql \\ -p 3306:3306 \\ --mount \"src=mysqldata,target=/var/lib/mysql\" \\ -e MYSQL_ROOT_PASSWORD=mysecret \\ mysql Copy The command runs the container in the foreground, removes it at the end, gives it a name of mysql maps the port 3306 of the host to the 3306 of the container, mounts a volume with the name mysqldata and sets an environment variable called MSQL_ROOT_PASSWORD. Once the database container has started, you can use any MySQL client application installed on your host PC to connect to localhost:3306 with the user ID root and password mysecret. "},{"title":"Most used options","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#most-used-options","content":"option\tdescription-d\trun a container as a background process (which exits when the application ends) -it\tInteractive mode. It keeps a container running in the foreground (even after the application ends), and show an activity log --rm\tremove the container after it stops --name\tname a container (a random GUID is used otherwise) -p\tmap a host port to a container port --mount\tcreate a persistent Docker-managed volume to retain data. The string specifies a src volume name and a target where it is mounted in the container’s file system -v\tmount a host folder using the notation <hostdir>:<containerdir> -e\tdefine an environment variable --env-file\tread environment variables from a file where each line defines a VAR=value --net\tconnect to specific Docker network --entrypoint\toverrides the default starting application If you do not specify --rm , the container will remain available even once it has stopped. Although it is possible to restart it, there’s rarely any benefit – it’s simpler to execute the same docker run command again. "},{"title":"Connect to the database using Adminer Mysql Client","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#connect-to-the-database-using-adminer-mysql-client","content":"If you don’t have a MySQL client to hand, Adminer is a lightweight PHP-based option. It is also available as a Docker image and can be launched in another terminal with: docker run \\ -it --rm --name adminer \\ -p 8080:8080 \\ adminer Copy The image will be downloaded automatically, otherwise you can install it as shown previously. Now you can type in the browser http://localhost:8080. Note that you cannot use localhostas the server name since Adminer will resolve that to its own container! Instead these are the options: Enter host.docker.internal. Docker Desktop routes this domain to your PC's network IP address, but it may not be available on all systems.Use your actual network IP address. This can be obtained with the ``ìfconfig``` command on macOS.Or us the container's IP address assigned by Docker. Docker creates it's own virtual network. docker inspect mysqlreturns information about the container in JS_ON format. You can locate the 'IPAddress' value suing the -f format option. docker inspect \\ -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \\ mysql Copy Alternatively, you can define a Docker network which containers can connect to. Any container can then use the name of another container name and have it resolve correctly, i.e. you can enter mysql as the server name on the Adminer login screen. "},{"title":"Connect to a container shell","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#connect-to-a-container-shell","content":"Every Docker container runs an isolated Linux environment. You can connect to its shell to run commands, examine logs, or perform any other activities. Remember containers are stateless! Any changes you make will be lost whenever the container is restarted. # Presuming your MySQL container is still running, open another terminal and enter docker exec -it mysql bash Copy Some lightweight images using Alpine Linux do not offer the bash shell. If this command fails, try using docker exec -it mysql sh instead. mysql -u root -pmysecret Copy Enter exit to quit the shell. "},{"title":"List, pause/unpause, stop and restart containers","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#list-pauseunpause-stop-and-restart-containers","content":""},{"title":"List","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#list","content":"docker container ls # or docker ps Copy Each container is assigned a hexadecimal ID which can be used as a reference in Docker commands. However, specifying a container --name makes management considerably easier. To view all containers, both running and stopped, enter: docker container ls -a Copy "},{"title":"Restart","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#restart","content":"docker container restart adminer mysql Copy "},{"title":"Pause/Unpause","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#pauseunpause","content":"docker container pause mysql Copy docker container unpause mysal Copy "},{"title":"Stop","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#stop","content":"Containers which stared with the -rm option are removed when they are stopped. You can list all containers with docker ps -a. docker container stop adminer mysql Copy "},{"title":"Remove","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#remove","content":"docker container prune Copy "},{"title":"Define a Docker network","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#define-a-docker-network","content":"Generally it is easier to refer to another container using its --namethen its IP. Stop any running containers then create a new network, e.g. named mysqlnet here: docker network create --driver bridge mysqlnet Copy Any container can connect to this network using the --net option when it is launched. docker run \\ -d --rm --name mysql \\ -p 3306:3306 \\ --mount \"src=mysqldata,target=/var/lib/mysql\" \\ -e MYSQL_ROOT_PASSWORD=mysecret \\ --net mysqlnet \\ mysql Copy docker run \\ -d --rm --name adminer \\ -p 8080:8080 \\ --net mysqlnet \\ adminer Copy Each container’s name now resolves on the Docker mysqlnet network. You can therefore enter mysql as the server name on the Adminer login screen. "},{"title":"Cleaning up","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#cleaning-up","content":""},{"title":"Statistics","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#statistics","content":"docker system df Copy "},{"title":"List containers, images, volmes and networks","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#list-containers-images-volmes-and-networks","content":"docker container ls -a Copy docker image ls -a Copy docker volume ls Copy docker network ls Copy "},{"title":"Remove unused networks and images","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#remove-unused-networks-and-images","content":"docker system prune Copy The following command will do the same and also wipe any image not associated with a running container: docker system prune -a Copy The latest images will therefore have to be downloaded again if you require them. "},{"title":"Deleting disk volumes","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#deleting-disk-volumes","content":"Assuming you’re happy to proceed, you can view Docker volumes with: docker volume ls Copy then delete any by ID or name: docker volume rm <name> Copy Unused Docker volumes –those not currently attached to a running container– can be removed with: docker volume prune Copy Alternatively, use docker volume prune -a will delete them all. You only have yourself to blame!... "},{"title":"Full clean start","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#full-clean-start","content":"docker system prune -a --volumes Copy Add -f if you want to force the wipe without a confirmation prompt. "},{"title":"Launch multiple containers with Docker Compose","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#launch-multiple-containers-with-docker-compose","content":"Docker Compose provides a way to build and launch containers, networks, and volumes from a single configuration file named docker-compose.yml. version: '3' services: mysql: image: mysql container_name: mysql environment: - MYSQL_ROOT_PASSWORD=mysecret volumes: - mysqldata:/var/lib/mysql ports: - \"3306:3306\" networks: - mysqlnet restart: on-failure adminer: image: adminer container_name: adminer depends_on: - mysql ports: - \"8080:8080\" networks: - mysqlnet restart: on-failure volumes: mysqldata: networks: mysqlnet: Copy Now launch Docker Compose from the same directory as your docker-compose.yml file using: docker-compose up Copy "},{"title":"Running on the background","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#running-on-the-background","content":"docker-compose up -d Copy "},{"title":"Stop","type":1,"pageTitle":"MySQL database with Docker","url":"mysql-with-docker#stop-1","content":"docker compose stop Copy "},{"title":"Object Oriented Design","type":0,"sectionRef":"#","url":"object-oriented-design","content":"","keywords":""},{"title":"Symptoms ob Bad Design","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#symptoms-ob-bad-design","content":"RigidityFragilityImmobilityViscosity "},{"title":"Rigidity","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#rigidity","content":"Changes are difficult and painful. Every change requires cascade of changes in dependent modules. Scope of change is unpredictable. Your manager has a favorite scope multiplier, usually more than 2. "},{"title":"Fragility","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#fragility","content":"Closely related to Rigidity You can never predict the impact of the change. You never know what will break. The \"Christmas tree\". "},{"title":"Basic Principles of Object Oriented Design","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#basic-principles-of-object-oriented-design","content":"Single responsibility principle. A class should have only one reason to change.Open-Closed principle. Modules should be open for extension but closed for modification.Liskov substitution principle. Basically means that children classes should not break parent's interface.Interface segregation principle.Dependency inversion principle. High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend upon details. Details should depend upon abstractions. "},{"title":"1. How to Spot single responsibility principle violation","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#1-how-to-spot-single-responsibility-principle-violation","content":"Member groups or even coalitions, boolean flags, hard to name classes, long unit tests, hard to test-double units. "},{"title":"2. Open Closed Principle","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#2-open-closed-principle","content":"Design patterns: Visitor, Decorator. "},{"title":"3. How to spot Liskov substitution principle violation","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#3-how-to-spot-liskov-substitution-principle-violation","content":"Derivative that tries to do less than the base class. Instanceof checks. Hiding or stubbing parent methods. Polymorphic if statements. "},{"title":"5. Friends of Dependency inversion principle","type":1,"pageTitle":"Object Oriented Design","url":"object-oriented-design#5-friends-of-dependency-inversion-principle","content":"Abstractions (Interfaces/Abstract Classes) Patterns Factory, Abstract FactoryAdapterService Locator "},{"title":"Offline search for docusaurus","type":0,"sectionRef":"#","url":"offline-search-for-docusaurus","content":"","keywords":""},{"title":"Sample","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#sample","content":") "},{"title":"Prerequisites","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#prerequisites","content":"worker_thread is needed, suggested node version > 12.X For older version of node use docusaurus-lunr-search version 2.1.0(npm i docusaurus-lunr-search@2.1.0) "},{"title":"How to Use ?","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#how-to-use-","content":"Install this package npm i docusaurus-lunr-search --save Copy Then run npm install to update, build, and link the packages npm install Copy Then run docusaurus swizzle npm run swizzle docusaurus-lunr-search SearchBar -- --danger Copy Add the docusaurus-lunr-search plugin to your docusaurus.config.js module.exports = { // ... plugins: [require.resolve('docusaurus-lunr-search')], } Copy Then build your Docusaurus project npm run build Copy Serve your application npx http-server ./build Copy Note: Docusaurus search information can only be generated from a production build. Local development is currently not supported. "},{"title":"Language options","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#language-options","content":"module.exports = { // ... plugins: [[ require.resolve('docusaurus-lunr-search'), { languages: ['en', 'de'] // language codes }], } Copy Supports all the language listed here https://github.com/MihaiValentin/lunr-languages "},{"title":"Other options","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#other-options","content":""},{"title":"excludeRoutes","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#excluderoutes","content":"You can exclude certain routes from the search by using this option: module.exports = { // ... plugins: [ [require.resolve('docusaurus-lunr-search'), { excludeRoutes: [ 'docs/changelogs/**/*', // exclude changelogs from indexing ] }] ], } Copy "},{"title":"indexBaseUrl","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#indexbaseurl","content":"Base url will not indexed by default, if you want to index the base url set this option to true module.exports = { // ... plugins: [ [require.resolve('docusaurus-lunr-search'), { indexBaseUrl: true } ] ], } Copy Thanks to algolia/docsearch.js, I modified it to create this search component And thanks cmfcmf, I used the code from his library docusaurus-search-local for multi-language support. "},{"title":"Changelog","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#changelog","content":"Checkout the releases page for changelog. "},{"title":"Resources","type":1,"pageTitle":"Offline search for docusaurus","url":"offline-search-for-docusaurus#resources","content":"docusaurus-lunr-search "},{"title":"Programming Jokes","type":0,"sectionRef":"#","url":"programming-jokes","content":"","keywords":""},{"title":"Resources","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#resources","content":"Best Programming Jokes30 Jokes Only Programmers Will GetProgramming Jokes: Top 20 Funniest Jokes Only Programmers will getWhat's the best programming joke that you know? "},{"title":"Jokes","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#jokes","content":""},{"title":"VPN","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#vpn","content":" "},{"title":"Loops","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#loops","content":"Q. How did the programmer die in the shower? A. He read the shampoo bottle instructions: Lather. Rinse. Repeat. Copy A Programmer was walking out of door for work, his wife said “while you’re out, buy some milk” and he never came home. ps. That took me a while to get. Copy "},{"title":"Light bulb","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#light-bulb","content":"How many programmers does it take to change a light bulb? None – It’s a hardware problem Copy "},{"title":"Java","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#java","content":"“Knock, knock.” “Who’s there?” very long pause…. “Java.” Copy Some people see a problem and think \"I know, I'll use Java!\". Now they have a ProblemFactory. Copy Q: Why do Java programmers wear glasses? A: Because they don't C#! Copy "},{"title":"Warnings","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#warnings","content":"A man is smoking a cigarette and blowing smoke rings into the air. His girlfriend becomes irritated with the smoke and says, “Can’t you see the warning on the cigarette pack? Smoking is hazardous to your health!” To which the man replies, “I am a programmer. We don’t worry about warnings; we only worry about errors.” Copy "},{"title":"npm","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#npm","content":"1/3 of US bandwith is used by Netflix... the rest is used by `rm -rf node_modules && npm install` Copy "},{"title":"Logical operators","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#logical-operators","content":"GF: All you ever talk about is Programming Jokes! I am sick of it! It’s me or your Programming Jokes! Me: You meant to say it’s you XOR my Programming Jokes. GF: I am leaving you. Copy "},{"title":"Race Conditions","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#race-conditions","content":"Knock knock. Race condition. Who's there? Copy "},{"title":"TCP / UDP","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#tcp--udp","content":"What's the best part about TCP jokes? I get to keep telling them until you get them. ps. I've got a really good UDP joke to tell you, but I don't know if you'll get it Copy "},{"title":"if / else","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#if--else","content":"A programmer puts two glasses on his bedside table before going to sleep. A full one, in case he gets thirsty, and an empty one, in case he doesn’t. Copy "},{"title":"Management","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#management","content":"A man flying in a hot air balloon suddenly realizes he’s lost. He reduces height and spots a man down below. He lowers the balloon further and shouts to get directions, \"Excuse me, can you tell me where I am?\" The man below says: \"Yes. You're in a hot air balloon, hovering 30 feet above this field.\" \"You must work in Information Technology,\" says the balloonist. \"I do\" replies the man. \"How did you know?\" \"Well,\" says the balloonist, \"everything you have told me is technically correct, but It's of no use to anyone.\" The man below replies, \"You must work in management.\" \"I do,\" replies the balloonist, \"But how'd you know?\"* \"Well\", says the man, \"you don’t know where you are or where you’re going, but you expect me to be able to help. You’re in the same position you were before we met, but now it’s my fault.\" Copy "},{"title":"Octals","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#octals","content":"Why do programmers confuse halloween and christmas? Because Oct 31 = Dec 25. Copy "},{"title":"Naming","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#naming","content":"Two programmers get into a foo Copy "},{"title":"Project Management","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#project-management","content":"Q: What did the Project Manager say to the Programmer? A: You start coding, I'll go find out what they want. Copy At a recent computer software engineering management course, the participants were given an awkward question to answer: \"If you had just boarded an airliner and discovered that your team of programmers had been responsible for the flight control software, how many of you would disembark immediately?\" Among the ensuing forest of raised hands only one man sat motionless. When asked what he would do, he replied that he would be quite content to stay aboard. With his team's software, he said, the plane was unlikely to even taxi as far as the runway, let alone take off. Copy "},{"title":"Demos","type":1,"pageTitle":"Programming Jokes","url":"programming-jokes#demos","content":" "},{"title":"React.memo()","type":0,"sectionRef":"#","url":"react-memo","content":"","keywords":""},{"title":"When to use React.memo()","type":1,"pageTitle":"React.memo()","url":"react-memo#when-to-use-reactmemo","content":"Pure functional component. Your component is functional and given the same props, always renders the same output.Renders often. Your component renders often.Your component is usually provided with the same props during re-rendering.Your comonent contains a decent amount of UI elements to reason props equality check. "},{"title":"Best scenario","type":1,"pageTitle":"React.memo()","url":"react-memo#best-scenario","content":"A common situation that makes a component render with the same props is being forced to render by a parent component. "},{"title":"When not to","type":1,"pageTitle":"React.memo()","url":"react-memo#when-not-to","content":"The component isn't heavy and usually renders with different props.Performance-related changes applied incorrectly can even harm performance -> use profiler Extend PureComponent class or define a custom implementation of shouldComponentUpdate() method if you need memoization for class-based components. "},{"title":"React.memo() and callback functions","type":1,"pageTitle":"React.memo()","url":"react-memo#reactmemo-and-callback-functions","content":"const MemoizedLogout = React.memo(Logout); function MyApp({ store, cookies }) { const onLogout = useCallback( () => cookies.clear('session'), [cookies] ); return ( <div className=\"main\"> <header> <MemoizedLogout username={store.username} onLogout={onLogout} /> </header> {store.content} </div> ); } Copy useCallback(() => cookies.clear('session'), [cookies]) always returns the same function instance as long as cookies is the same. Memoization of MemoizedLogout is fixed. "},{"title":"React.memo() is a performance hint","type":1,"pageTitle":"React.memo()","url":"react-memo#reactmemo-is-a-performance-hint","content":"Strictly, React uses memoization as a performance hint. While in most situations React avoids rendering a memoized component, you shouldn’t count on that to prevent rendering. React always re-renders the component if the state changes, even if the component is wrapped in React.memo().  Use React.memo() wisely "},{"title":"React Patterns","type":0,"sectionRef":"#","url":"react-patterns","content":"","keywords":""},{"title":"Elements","type":1,"pageTitle":"React Patterns","url":"react-patterns#elements","content":"Elements are anything inside angle brackets. <div></div> <Greeting /> Copy "},{"title":"Components","type":1,"pageTitle":"React Patterns","url":"react-patterns#components","content":"Components return Elements. function Greeting() { return <div>Hi there!</div>; } Copy "},{"title":"defaultProps","type":1,"pageTitle":"React Patterns","url":"react-patterns#defaultprops","content":"function Greeting(props) { return <div>Hi {props.name}!</div>; } Greeting.defaultProps = { name: \"Guest\", }; Copy "},{"title":"Destructuring props","type":1,"pageTitle":"React Patterns","url":"react-patterns#destructuring-props","content":"Destructuring assignment is used a lot in function components. function Greeting({ name }) { return <div>Hi {name}!</div>; } Copy "},{"title":"Render prop","type":1,"pageTitle":"React Patterns","url":"react-patterns#render-prop","content":"const Width = ({ children }) => children(500); Copy <Width>{(width) => <div>window is {width}</div>}</Width> Copy class WindowWidth extends React.Component { constructor() { super(); this.state = { width: 0 }; } componentDidMount() { this.setState({ width: window.innerWidth }, () => window.addEventListener(\"resize\", ({ target }) => this.setState({ width: target.innerWidth }) ) ); } render() { return this.props.children(this.state.width); } } Copy "},{"title":"Layout component","type":1,"pageTitle":"React Patterns","url":"react-patterns#layout-component","content":"<HorizontalSplit startSide={<SomeSmartComponent />} endSide={<AnotherSmartComponent />} /> Copy "},{"title":"Higher-order component","type":1,"pageTitle":"React Patterns","url":"react-patterns#higher-order-component","content":"This is a powerful pattern for providing fetching and providing data to any number of function components. const Connect = ComposedComponent => class extends React.Component { constructor() { super(); this.state = { name: \"\" }; } componentDidMount() { // this would fetch or connect to a store this.setState({ name: \"Michael\" }); } render() { return <ComposedComponent {...this.props} name={this.state.name} />; } }; Copy const ConnectedMyComponent = Connect(Greeting); Copy "},{"title":"State hoisting","type":1,"pageTitle":"React Patterns","url":"react-patterns#state-hoisting","content":"The state is hoisted to the container, by the provided callback, where it's used to update local state. This sets a nice clear boundary and maximizes the re-usability of function component.  React PatternsGlossary of React Terms "},{"title":"React testing-libary example","type":0,"sectionRef":"#","url":"react-testing-library-example","content":"I am omitting the component because I want to focus in the test itself. import React from 'react' import { render, waitFor } from '@testing-library/react' import { ServerValidation } from './ServerValidation' describe('<ServerValidation>', () => { test('if no translation key present no message gets rendered', () => { const renderContext = render(<ServerValidation translationKey=\"\" unmountCallback={() => undefined}/>) expect(renderContext.queryByTestId('ErrorWrapper')).toBeNull() }) test('if translation key does not start with `validators` then it is a \"common.unknownError\"', () => { const renderContext = render(<ServerValidation translationKey=\"any.random.key\" unmountCallback={() => undefined}/>) const errorElement = renderContext.queryByTestId('ErrorWrapper') expect(errorElement).not.toBeNull() expect(errorElement.textContent).toBe('Sorry, there has been a temporary error which means you can\\'t perform this action right now. Please try again.') }) test('if translation key does start with `validators` then it should render the right message\"', () => { const renderContext = render(<ServerValidation translationKey=\"validators.required\" unmountCallback={() => undefined}/>) const errorElement = renderContext.queryByTestId('ErrorWrapper') expect(errorElement).not.toBeNull() expect(errorElement.textContent).toBe('This field is required.') }) test('when the component gets destroyed a unmountCallback should be called', async (done) => { const callback = jest.fn() const renderContext = render(<ServerValidation translationKey=\"validators.required\" unmountCallback={callback}/>) renderContext.unmount() await waitFor(() => expect(callback).toHaveBeenCalled()) done() }) }) Copy","keywords":""},{"title":"Reduce Usage Examples","type":0,"sectionRef":"#","url":"reduce","content":"","keywords":""},{"title":"Map","type":1,"pageTitle":"Reduce Usage Examples","url":"reduce#map","content":"function map(fn, arr) { return arr.reduce((acc, item, index, arr) => { return acc.concat(fn(item, index, arr)) }, []) } Copy "},{"title":"Filter","type":1,"pageTitle":"Reduce Usage Examples","url":"reduce#filter","content":"function filter(fn, arr) { return arr.reduce((newArr, item) => { return fn(item) ? newArr.concat([item]) : newArr }, []) } Copy "},{"title":"Compose","type":1,"pageTitle":"Reduce Usage Examples","url":"reduce#compose","content":"function compose(...fns) { return x => fns.reduceRight((v, f) => f(v), x) } Copy "},{"title":"Pipe","type":1,"pageTitle":"Reduce Usage Examples","url":"reduce#pipe","content":"function compose(...fns) { return x => fns.reduce((v, f) => f(v), x) } Copy "},{"title":"Resizing markdown images","type":0,"sectionRef":"#","url":"resizing-markdown-images","content":"After many attempts I have come to the conclusion that the best way is doing through css. And the cleanest way is to use the alt attribute. In the example I am using thumb and thumb autor to style the images. ![thumb Javascript for Kids](./2020/12/13/javascsript-for-kids.jpg) &nbsp; ![thumb autor Nick Morgan](./2020/12/13/nick-morgan.png) Copy And that is what we write in the .css img[alt^=thumb] { width: 100px; } img[alt^=\"thumb autor\"] { width: 100px; border-radius: 50%; } Copy","keywords":""},{"title":"Romulo Cintra's youtube channel","type":0,"sectionRef":"#","url":"romulo-cintra-youtube-channel","content":"I am very happy to have the chance to follow this youtube channel from my good friend Romulo Cintra. https://www.youtube.com/channel/UCW4imJoguoKQqJEilKKGuFQ?","keywords":""},{"title":"Snippets in Visual Studio Code","type":0,"sectionRef":"#","url":"snippets-in-visual-studio-code","content":"","keywords":""},{"title":"Install snippets from the Marketplace","type":1,"pageTitle":"Snippets in Visual Studio Code","url":"snippets-in-visual-studio-code#install-snippets-from-the-marketplace","content":"You can search for extensions that contains snippets in the Extensions view using the @category:\"snippets\" filter. "},{"title":"Create your own snippets","type":1,"pageTitle":"Snippets in Visual Studio Code","url":"snippets-in-visual-studio-code#create-your-own-snippets","content":"// in file 'Code/User/snippets/javascript.json' { \"For Loop\": { \"prefix\": [\"for\", \"for-const\"], \"body\": [\"for (const ${2:element} of ${1:array}) {\", \"\\t$0\", \"}\"], \"description\": \"A for loop.\" } } Copy In the example above: \"For Loop\" is the snippet name. It is displayed via IntelliSense if no description is provided.prefix defines one or more trigger words that display the snippet in IntelliSense. Substring matching is performed on prefixes, so in this case, \"fc\" could match \"for-const\".body is one or more lines of content, which will be joined as multiple lines upon insertion. Newlines and embedded tabs will be formatted according to the context in which the snippet is inserted.description is an optional description of the snippet displayed by IntelliSense. Additionally, the body of the example above has three placeholders (listed in order of traversal): ${1:array}, ${2:element}, and $0. You can quickly jump to the next placeholder with Tab, at which point you may edit the placeholder or jump again the next one. The string after the colon (if any) is the default text, for example element in ${2:element}. Placeholder traversal order is ascending by number, starting from one; zero is an optional special case that always comes last, and exits snippet mode with the cursor at the specified position. info Check resoursces sectionn for: Tabstops, Placeholders, Choice, Variables, Variable transforms... "},{"title":"Resources","type":1,"pageTitle":"Snippets in Visual Studio Code","url":"snippets-in-visual-studio-code#resources","content":"Snippets in Visual Studio Code "},{"title":"Running Promises","type":0,"sectionRef":"#","url":"running-promises","content":"","keywords":""},{"title":"The experiment","type":1,"pageTitle":"Running Promises","url":"running-promises#the-experiment","content":"We want to create promises that execute async: function makePromise(value = 0, ms = 0) { return new Promise((resolve) => { setTimeout(() => resolve(value), ms) }) } Copy We want a set, so we want an array, but we need the exact same array three times, so we can truely compare: const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] const TUPLES = values .map(makeValueRandomTimeTuple) function makePromises(tuples = [{value: 0, ms: 0}]) { return tuples.map(({value, ms}) => makePromise(value, ms)) } const promisesA = makePromises(TUPLES) const promisesB = makePromises(TUPLES) const promisesC = makePromises(TUPLES) // All three sets are copies of the same sets with promises that have to behave the same way Copy "},{"title":"Sequentially","type":1,"pageTitle":"Running Promises","url":"running-promises#sequentially","content":"function sequentially(arrayOfPromiseOrAsyncFn) { return arrayOfPromiseOrAsyncFn.reduce((previous, current) => previous .then(async res => { const next = await getPromise(current) return [...res, next] }) , Promise.resolve([])) } Copy "},{"title":"In parallel","type":1,"pageTitle":"Running Promises","url":"running-promises#in-parallel","content":"warning There is also a possible implementation with for of. function inParallel(arrayOfPromiseOrAsyncFn) { return new Promise(async resolve => { const result = [] const areAllResultsReady = () => result.length === arrayOfPromiseOrAsyncFn.length arrayOfPromiseOrAsyncFn.forEach((promiseOrAsyncFn) => { getPromise(promiseOrAsyncFn).then(res => { result.push(res) if (areAllResultsReady()) { resolve(result) } }) }) }) } Copy "},{"title":"In parallel keeping the order","type":1,"pageTitle":"Running Promises","url":"running-promises#in-parallel-keeping-the-order","content":"function inParallelButInOrder(array) { const promises = array.map(getPromise) return Promise.all(promises) } Copy "},{"title":"Original Experiment vs Final Experiment","type":1,"pageTitle":"Running Promises","url":"running-promises#original-experiment-vs-final-experiment","content":"(async () => { console.log(await getResultAndTime(sequentially(makePromises(TUPLES)))) console.log(await getResultAndTime(inParallel(makePromises(TUPLES)))) console.log(await getResultAndTime(inParallelButInOrder(makePromises(TUPLES)))) })() Copy vs (async () => { console.log(await getResultAndTime(sequentially(makeAsyncFns(TUPLES)))) console.log(await getResultAndTime(inParallel(makeAsyncFns(TUPLES)))) console.log(await getResultAndTime(inParallelButInOrder(makeAsyncFns(TUPLES)))) })() Copy "},{"title":"Testing a React component when unmounting with testing-library","type":0,"sectionRef":"#","url":"testing-a-react-component-when-unmounting-with-testing-library","content":"","keywords":""},{"title":"The Component","type":1,"pageTitle":"Testing a React component when unmounting with testing-library","url":"testing-a-react-component-when-unmounting-with-testing-library#the-component","content":"import React, { useEffect } from 'react' import PropTypes from 'prop-types' import { I18n } from 'react-redux-i18n' import { ErrorWrapper } from './ErrorWrapper' export function ServerErrorMessage ({ message, clearServerSideValidation }) { useEffect(() => clearServerSideValidation, [clearServerSideValidation]) return message ? (<ErrorWrapper> {message.startsWith('validators.') ? I18n.t(message) : I18n.t('common.unknownError')} </ErrorWrapper>) : null } ServerErrorMessage.propTypes = { message: PropTypes.string, clearServerSideValidation: PropTypes.func } ServerErrorMessage.defaultProps = { message: '' } Copy "},{"title":"The test (with Jest and testing-library)","type":1,"pageTitle":"Testing a React component when unmounting with testing-library","url":"testing-a-react-component-when-unmounting-with-testing-library#the-test-with-jest-and-testing-library","content":"import React from 'react' import { render, waitFor } from '@testing-library/react' import { ServerErrorMessage } from './ServerErrorMessage' const STANDARD_TRANSLATED_ERROR_MESSAGE = \"Sorry, there has been a temporary error which means you can't perform this action right now. Please try again.\" describe('<ServerErrorMessage>', () => { describe('message cannot be found in the translations', () => { const spy = jest.fn() const renderContext = render(<ServerErrorMessage message={'this message cannot be found in the translations'} clearServerSideValidation={spy} />) const alert = renderContext.getByRole('alert') test('we display the STANDARED_TRANSLATED_ERROR_MESSAGE', () => { expect(alert.textContent).toBe(STANDARD_TRANSLATED_ERROR_MESSAGE) }) test('we call the clearFunction when unmounting the component', async (done) => { renderContext.unmount() await waitFor(() => expect(spy).toHaveBeenCalled()) done() }) }) describe('the message has a translation', () => { test('we call display the translation', () => { const knownTranslation = 'validators.url' const TRANSLATION = 'Absolute URLs must start with https://.' const renderContext = render(<ServerErrorMessage message={knownTranslation} clearServerSideValidation={jest.fn()} />) const alert = renderContext.getByRole('alert') expect(alert.textContent).toBe(TRANSLATION) }) }) }) Copy "},{"title":"The Builder pattern","type":0,"sectionRef":"#","url":"the-builder-pattern","content":"","keywords":""},{"title":"The issue","type":1,"pageTitle":"The Builder pattern","url":"the-builder-pattern#the-issue","content":"Creating an object with too many arguments, using new and not returning a plain object. const frog = new Frog(\"Bob\", 9, 2.2, \"male\"); Copy "},{"title":"Using a class builder","type":1,"pageTitle":"The Builder pattern","url":"the-builder-pattern#using-a-class-builder","content":"With a class builder you can use setters, so the arguments are explicit. class FrogBuilder { constructor(name, gender) { this.name = name; this.gender = gender; } setWeight(weight) { this.weight = weight; return this; } setHeight(height) { this.height = height; return this; } build() { if (!(\"weight\" in this)) { throw new Error(\"Weight is missing\"); } if (!(\"height\" in this)) { throw new Error(\"Height is missing\"); } return { name: this.name, weight: this.weight, height: this.height, gender: this.gender, }; } } Copy And here you have it looks now: const leon = new FrogBuilder(\"Leon\", \"male\") .setWeight(14) .setHeight(3.7) .build(); Copy "},{"title":"Without class","type":1,"pageTitle":"The Builder pattern","url":"the-builder-pattern#without-class","content":"The same implementation without using class function FrogBuilder(name, gender) { this.name = name; this.gender = gender; this.setWeight = (weight) => { this.weight = weight; return this }; this.setHeight = (height) => { this.height = height; return this }; this.build = () => { if (!(\"weight\" in this)) { // see usage in info throw new Error(\"Weight is missing\"); } if (!(\"height\" in this)) { throw new Error(\"Height is missing\"); } return { name: this.name, weight: this.weight, height: this.height, gender: this.gender, }; }; } Copy info How to use in operator const leon = new FrogBuilder(\"Leon\", \"male\") .setWeight(14) .setHeight(3.7) .build(); Copy "},{"title":"Purely functional","type":1,"pageTitle":"The Builder pattern","url":"the-builder-pattern#purely-functional","content":"This is my favorite because I am not a fan of new. function frogBuilder({name, weight, height, gender} = {}) { return { build: () => {{ name, weight, height, gender }), setName: (name) => frogBuilder({name}), setWeight: (weight) => frogBuilder({weight}), setHeight: (height) => frogBuilder({height}), setGender: (gender) => frogBuilder({gender}), } } Copy const leon = frogBuilder() .setName('Leon') .setGender('male') .setWeight(14) .setHeight(3.7) .build() Copy "},{"title":"Using environment variables in react","type":0,"sectionRef":"#","url":"using-environment-variables-in-react","content":"","keywords":""},{"title":"Method 1: Using npm scripts (thanks to webpack)","type":1,"pageTitle":"Using environment variables in react","url":"using-environment-variables-in-react#method-1-using-npm-scripts-thanks-to-webpack","content":""},{"title":"package.json","type":1,"pageTitle":"Using environment variables in react","url":"using-environment-variables-in-react#packagejson","content":"{ scripts: { \"dev\": \"webpack --env.API_URL=http://localhost:8000 --config webpack.config.dev.js\", \"build\": \"webpack --env.API_URL=https://www.myapi.com --config webpack.config.build.js\" } } Copy "},{"title":"webpack config file","type":1,"pageTitle":"Using environment variables in react","url":"using-environment-variables-in-react#webpack-config-file","content":"{process.env.API_URL} will be replaced when we compile our code. The problem is, we didn’t tell webpack to compile those variables to real values. Let’s do that in our webpack config file with the DefinePlugin webpack plugin: module.exports = (env) => { // create a nice object from the env variable const envKeys = Object.keys(env).reduce((prev, next) => { prev[`process.env.${next}`] = JSON.stringify(env[next]); return prev; }, {}); return { plugins: [ new webpack.DefinePlugin(envKeys) ] }; }; Copy "},{"title":"React","type":1,"pageTitle":"Using environment variables in react","url":"using-environment-variables-in-react#react","content":"const App = () => <h1>{process.env.API_URL}</h1>; Copy "},{"title":"Method 2: Using an .env file to set environment variables","type":1,"pageTitle":"Using environment variables in react","url":"using-environment-variables-in-react#method-2-using-an-env-file-to-set-environment-variables","content":"info To prevent people from finding out your local database password is the same one you use for every single one of your accounts on the internet , add the .env file to your .gitignore. API_URL=http://localhost:8000 Copy $ npm install --save-dev dotenv Copy "},{"title":"Webpack config file","type":1,"pageTitle":"Using environment variables in react","url":"using-environment-variables-in-react#webpack-config-file-1","content":"const webpack = require('webpack'); const dotenv = require('dotenv'); module.exports = () => { // call dotenv and it will return an Object with a parsed key const env = dotenv.config().parsed; // reduce it to a nice object, the same as before const envKeys = Object.keys(env).reduce((prev, next) => { prev[`process.env.${next}`] = JSON.stringify(env[next]); return prev; }, {}); return { plugins: [ new webpack.DefinePlugin(envKeys) ] }; }; Copy "},{"title":"Different environment variables for different environments","type":1,"pageTitle":"Using environment variables in react","url":"using-environment-variables-in-react#different-environment-variables-for-different-environments","content":".env (production).env.development (development) { \"scripts\": { \"dev\": \"webpack --env.ENVIRONMENT=development --config webpack.config.dev.js\", \"build\": \"webpack --env.ENVIRONMENT=production --config webpack.config.build.js\" } } Copy const webpack = require('webpack'); const dotenv = require('dotenv'); const fs = require('fs'); // to check if the file exists const path = require('path'); // to get the current path module.exports = (env) => { // Get the root path (assuming your webpack config is in the root of your project!) const currentPath = path.join(__dirname); // Create the fallback path (the production .env) const basePath = currentPath + '/.env'; // We're concatenating the environment name to our filename to specify the correct env file! const envPath = basePath + '.' + env.ENVIRONMENT; // Check if the file exists, otherwise fall back to the production .env const finalPath = fs.existsSync(envPath) ? envPath : basePath; // Set the path parameter in the dotenv config const fileEnv = dotenv.config({ path: finalPath }).parsed; // reduce it to a nice object, the same as before (but with the variables from the file) const envKeys = Object.keys(fileEnv).reduce((prev, next) => { prev[`process.env.${next}`] = JSON.stringify(fileEnv[next]); return prev; }, {}); return { plugins: [ new webpack.DefinePlugin(envKeys) ] }; Copy Using environment variables in React "},{"title":"Yup validation with file type and size","type":0,"sectionRef":"#","url":"yup-validation-with-file-type-and-size","content":"","keywords":""},{"title":"Resources","type":1,"pageTitle":"Yup validation with file type and size","url":"yup-validation-with-file-type-and-size#resources","content":"https://github.com/formium/formik/issues/926Formik — Handling files and reCaptchaSandbox Example "},{"title":"Example","type":1,"pageTitle":"Yup validation with file type and size","url":"yup-validation-with-file-type-and-size#example","content":"The trick is to use mixed schema to be able to access the file object. const FILE_SIZE = 160 * 1024 const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/gif', 'image/png'] const iconFileSchema = Yup.mixed() .test('fileSize', 'File size is too large', value => value.size <= FILE_SIZE) .test('fileType', 'Unsupported File Format', value => SUPPORTED_FORMATS.includes(value.type)) Copy "},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/functional-js/resources","content":"Immutable.jsLodashMoriRamdaRtype","keywords":""},{"title":"Style Guide","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Markdown Syntax","type":1,"pageTitle":"Style Guide","url":"docs/#markdown-syntax","content":"To serve as an example page when styling markdown based Docusaurus sites. "},{"title":"Headers","type":1,"pageTitle":"Style Guide","url":"docs/#headers","content":"H1 - Create the best documentation# "},{"title":"H2 - Create the best documentation","type":1,"pageTitle":"Style Guide","url":"docs/#h2---create-the-best-documentation","content":""},{"title":"H3 - Create the best documentation","type":1,"pageTitle":"Style Guide","url":"docs/#h3---create-the-best-documentation","content":"H4 - Create the best documentation# H5 - Create the best documentation# H6 - Create the best documentation#  "},{"title":"Emphasis","type":1,"pageTitle":"Style Guide","url":"docs/#emphasis","content":"Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough uses two tildes. Scratch this.  "},{"title":"Lists","type":1,"pageTitle":"Style Guide","url":"docs/#lists","content":"First ordered list itemAnother item Unordered sub-list. Actual numbers don't matter, just that it's a number Ordered sub-list And another item. Unordered list can use asterisks Or minuses Or pluses  "},{"title":"Links","type":1,"pageTitle":"Style Guide","url":"docs/#links","content":"I'm an inline-style link I'm an inline-style link with title I'm a reference-style link You can use numbers for reference-style link definitions Or leave it empty and use the link text itself. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com/ or http://www.example.com/ and sometimes example.com (but not on GitHub, for example). Some text to show that the reference links can follow later.  "},{"title":"Images","type":1,"pageTitle":"Style Guide","url":"docs/#images","content":"Here's our logo (hover to see the title text): Inline-style:  Reference-style:  Images from any folder can be used by providing path to file. Path should be relative to markdown file.   "},{"title":"Code","type":1,"pageTitle":"Style Guide","url":"docs/#code","content":"var s = 'JavaScript syntax highlighting'; alert(s); Copy s = \"Python syntax highlighting\" print(s) Copy No language indicated, so no syntax highlighting. But let's throw in a <b>tag</b>. Copy function highlightMe() { console.log('This line can be highlighted!'); } Copy  "},{"title":"Tables","type":1,"pageTitle":"Style Guide","url":"docs/#tables","content":"Colons can be used to align columns. Tables\tAre\tCoolcol 3 is\tright-aligned\t\\$1600 col 2 is\tcentered\t\\$12 zebra stripes\tare neat\t\\$1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown\tLess\tPrettyStill\trenders\tnicely 1\t2\t3  "},{"title":"Blockquotes","type":1,"pageTitle":"Style Guide","url":"docs/#blockquotes","content":"Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.  "},{"title":"Inline HTML","type":1,"pageTitle":"Style Guide","url":"docs/#inline-html","content":"Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags.  "},{"title":"Line Breaks","type":1,"pageTitle":"Style Guide","url":"docs/#line-breaks","content":"Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph. This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.  "},{"title":"Admonitions","type":1,"pageTitle":"Style Guide","url":"docs/#admonitions","content":"note This is a note tip This is a tip important This is important caution This is a caution warning This is a warning "},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/git/resources","content":"Learn git Branching (Book)","keywords":""},{"title":"Learning Sites","type":0,"sectionRef":"#","url":"docs/learning-sites/resources","content":" Last edited: 2021-02-08 EggheadFrontendMastersleveluptutorials.comSitepoint","keywords":""},{"title":"Github Projects","type":0,"sectionRef":"#","url":"docs/github-projects/projects","content":"Chantastic Sites","keywords":""},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/npm/resources","content":"npm trends","keywords":""},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/node/resources","content":"Switching between Node versions during development (nvm vs n)","keywords":""},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/react/resources","content":"Getting Started","keywords":""}]